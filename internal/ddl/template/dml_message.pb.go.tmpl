package {{.PackageName}}

import (
	"database/sql"
	"strings"

	"github.com/xissy/kubeflake"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

//go:generate mockgen -package {{.PackageName}} -self_package {{.GoImportPath}} -source ./{{.GoFilename}} -destination ./{{.MockFilename}} -mock_names {{.Message.Name}}Recorder=Mock{{.Message.Name}}Recorder {{.GoImportPath}} {{.Message.Name}}Recorder

const (
	{{.Message.VarName}}InsertStmt = `
		INSERT INTO {{.Message.SQLName}} (
			{{range $index, $field := .Message.Fields}}
				{{- if $index}}, {{end}}{{$field.SQLName}}
			{{- end}}
		) VALUES (
			{{range $index, $field := .Message.Fields}}
				{{- if $index}}, {{end}}?
			{{- end}}
		)
	`

	{{.Message.VarName}}UpdateStmt = `
		UPDATE {{.Message.SQLName}} SET
			{{range $index, $field := .Message.Fields}}
				{{- if $index}}, {{end}}{{$field.SQLName}} = ?
			{{- end}}
		WHERE
			{{range $index, $field := .Message.KeyFields}}
				{{- if $index}} AND {{end}}{{$field.SQLName}} = ?
			{{- end}}
	`
)

var (
	_ = timestamppb.Timestamp{}
	_ = wrapperspb.Int32Value{}
)

type {{.Message.Name}}Recorder interface {
	Get(db *sql.DB, id uint64) (*{{.Message.Name}}, error)
	List(db *sql.DB, lastID *wrapperspb.UInt64Value, asc bool, limit int64) ([]*{{.Message.Name}}, error)
	Save(db *sql.DB) error
	{{range .Message.Indices -}}
	FindOneBy{{range $index, $field := .Fields}}{{if $index}}And{{end}}{{$field.GoName}}{{end}}(db *sql.DB,
		{{- range $index, $field := .Fields -}}
			{{- if $index}}, {{end}}{{$field.GoName}} interface{}
		{{- end -}}
	) (*{{$.Message.Name}}, error)
	FindBy{{range $index, $field := .Fields}}{{if $index}}And{{end}}{{$field.GoName}}{{end}}(db *sql.DB,
		{{- range $index, $field := .Fields -}}
			{{- if $index}}, {{end}}{{$field.GoName}} interface{}
		{{- end -}}
	) ([]*{{$.Message.Name}}, error)
	{{end}}
}

func (m *{{.Message.Name}}) Get(db *sql.DB, id uint64) (*{{.Message.Name}}, error) {
	stmt, err := db.Prepare("SELECT * FROM {{.Message.SQLName}} WHERE id = ?")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm {{.Message.Name}}

	{{range $index, $field := .Message.Fields}}
		{{- if $field.SupportsSQLNullType}}
			var {{$field.VarName}} {{$field.GoType}}
		{{- end}}
	{{- end}}

	if err = stmt.QueryRow(id).Scan(
		{{- range $index, $field := .Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				&{{$field.VarName}},
			{{- else}}
				&mm.{{$field.GoName}},
			{{- end}}
		{{- end}}
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	{{range $index, $field := .Message.Fields}}
		{{- if $field.SupportsSQLNullType}}
			if {{$field.VarName}}.Valid {
				{{- if eq $field.GoType "sql.NullTime"}}
					mm.{{$field.GoName}} = timestamppb.New({{$field.VarName}}.Time)
				{{- end}}
				{{- if eq $field.GoType "sql.NullString"}}
					mm.{{$field.GoName}} = &wrapperspb.StringValue{Value: {{$field.VarName}}.String}
				{{- end}}
			}
		{{- end}}
	{{- end}}

	return &mm, nil
}

func (m *{{.Message.Name}}) List(db *sql.DB, lastID *wrapperspb.UInt64Value, asc bool, limit int64) ([]*{{.Message.Name}}, error) {
	q := "SELECT * FROM {{.Message.SQLName}}"
	if lastID != nil {
		if asc {
			q += " WHERE id > ?"
		} else {
			q += " WHERE id < ?"
		}
	}
	if asc {
		q += " ORDER BY id ASC"
	} else {
		q += " ORDER BY id DESC"
	}
	q += " LIMIT ?"

	stmt, err := db.Prepare(q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	if lastID != nil {
		args = append(args, lastID.Value)
	}
	args = append(args, limit)

	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*{{.Message.Name}}

	for rows.Next() {
		var mm {{.Message.Name}}

		{{range $index, $field := .Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				var {{$field.VarName}} {{$field.GoType}}
			{{- end}}
		{{- end}}

		if err = rows.Scan(
			{{- range $index, $field := .Message.Fields}}
				{{- if $field.SupportsSQLNullType}}
					&{{$field.VarName}},
				{{- else}}
					&mm.{{$field.GoName}},
				{{- end}}
			{{- end}}
		); err != nil {
			return nil, err
		}

		{{range $index, $field := .Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				if {{$field.VarName}}.Valid {
					{{- if eq $field.GoType "sql.NullTime"}}
						mm.{{$field.GoName}} = timestamppb.New({{$field.VarName}}.Time)
					{{- end}}
					{{- if eq $field.GoType "sql.NullString"}}
						mm.{{$field.GoName}} = &wrapperspb.StringValue{Value: {{$field.VarName}}.String}
					{{- end}}
				}
			{{- end}}
		{{- end}}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *{{.Message.Name}}) FindByIDs(db *sql.DB, ids []uint64) ([]*{{.Message.Name}}, error) {
	if len(ids) == 0 {
		return nil, nil
	}

	q := "SELECT * FROM {{.Message.SQLName}} WHERE id IN ("
	for i := range ids {
		if i > 0 {
			q += ", "
		}
		q += "?"
	}
	q += ")"

	stmt, err := db.Prepare(q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	for _, id := range ids {
		args = append(args, id)
	}

	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*{{.Message.Name}}

	for rows.Next() {
		var mm {{.Message.Name}}

		{{range $index, $field := .Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				var {{$field.VarName}} {{$field.GoType}}
			{{- end}}
		{{- end}}

		if err = rows.Scan(
			{{- range $index, $field := .Message.Fields}}
				{{- if $field.SupportsSQLNullType}}
					&{{$field.VarName}},
				{{- else}}
					&mm.{{$field.GoName}},
				{{- end}}
			{{- end}}
		); err != nil {
			return nil, err
		}

		{{range $index, $field := .Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				if {{$field.VarName}}.Valid {
					{{- if eq $field.GoType "sql.NullTime"}}
						mm.{{$field.GoName}} = timestamppb.New({{$field.VarName}}.Time)
					{{- end}}
					{{- if eq $field.GoType "sql.NullString"}}
						mm.{{$field.GoName}} = &wrapperspb.StringValue{Value: {{$field.VarName}}.String}
					{{- end}}
				}
			{{- end}}
		{{- end}}

		arr = append(arr, &mm)
	}

	return arr, nil
}

{{range .Message.Indices}}
func (m *{{$.Message.Name}}) FindOneBy{{range $index, $field := .Fields}}{{if $index}}And{{end}}{{$field.GoName}}{{end}}(db *sql.DB,
	{{- range $index, $field := .Fields}}
		{{- if $index}}, {{end}}{{$field.VarName}} interface{}
	{{- end}}) (*{{$.Message.Name}}, error) {
	stmt, err := db.Prepare("SELECT * FROM {{$.Message.SQLName}} WHERE {{range $index, $field := .Fields}}{{if $index}} AND {{end}}{{$field.SQLName}}=?{{end}}")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm {{$.Message.Name}}

	{{range $index, $field := $.Message.Fields}}
		{{- if $field.SupportsSQLNullType}}
			var {{$field.VarName}} {{$field.GoType}}
		{{- end}}
	{{- end}}

	if err = stmt.QueryRow({{range $index, $field := .Fields}}{{if $index}}, {{end}}{{$field.VarName}}{{end}}).Scan(
		{{- range $index, $field := $.Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				&{{$field.VarName}},
			{{- else}}
				&mm.{{$field.GoName}},
			{{- end}}
		{{- end}}
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	{{range $index, $field := $.Message.Fields}}
		{{- if $field.SupportsSQLNullType}}
			if {{$field.VarName}}.Valid {
				{{- if eq $field.GoType "sql.NullTime"}}
					mm.{{$field.GoName}} = timestamppb.New({{$field.VarName}}.Time)
				{{- end}}
				{{- if eq $field.GoType "sql.NullString"}}
					mm.{{$field.GoName}} = &wrapperspb.StringValue{Value: {{$field.VarName}}.String}
				{{- end}}
			}
		{{- end}}
	{{end}}

	return &mm, nil
}

func (m *{{$.Message.Name}}) FindBy{{range $index, $field := .Fields}}{{if $index}}And{{end}}{{$field.GoName}}{{end}}(db *sql.DB,
	{{- range $index, $field := .Fields}}
		{{- if $index}}, {{end}}{{$field.VarName}} interface{}
	{{- end}}) ([]*{{$.Message.Name}}, error) {
	stmt, err := db.Prepare("SELECT * FROM {{$.Message.SQLName}} WHERE {{range $index, $field := .Fields}}{{if $index}} AND {{end}}{{$field.SQLName}}=?{{end}}")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	rows, err := stmt.Query({{range $index, $field := .Fields}}{{if $index}}, {{end}}{{$field.VarName}}{{end}})
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*{{$.Message.Name}}

	for rows.Next() {
		var mm {{$.Message.Name}}

		{{range $index, $field := $.Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				var {{$field.VarName}} {{$field.GoType}}
			{{- end}}
		{{- end}}

		if err = rows.Scan(
			{{- range $index, $field := $.Message.Fields}}
				{{- if $field.SupportsSQLNullType}}
					&{{$field.VarName}},
				{{- else}}
					&mm.{{$field.GoName}},
				{{- end}}
			{{- end}}
		); err != nil {
			if err == sql.ErrNoRows {
				return nil, nil
			}
			return nil, err
		}

		{{range $index, $field := $.Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				if {{$field.VarName}}.Valid {
					{{- if eq $field.GoType "sql.NullTime"}}
						mm.{{$field.GoName}} = timestamppb.New({{$field.VarName}}.Time)
					{{- end}}
					{{- if eq $field.GoType "sql.NullString"}}
						mm.{{$field.GoName}} = &wrapperspb.StringValue{Value: {{$field.VarName}}.String}
					{{- end}}
				}
			{{- end}}
		{{end}}

		arr = append(arr, &mm)
	}

	return arr, nil
}
{{end}}

func (m *{{.Message.Name}}) Save(db *sql.DB) error {
	if m.Id == 0 {
		m.Id = kubeflake.Must(kubeflake.New())
	}

	shouldInsert := true
	mm, err := m.Get(db, m.Id)
	if err != nil && err != sql.ErrNoRows {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insert(db); err != nil {
			return err
		}
	} else {
		if err := m.update(db); err != nil {
			return err
		}
	}

	mm, err = m.Get(db, m.Id)
	if err != nil {
		return err
	}

	proto.Merge(m, mm)

	return nil
}

func (m *{{.Message.Name}}) insert(db *sql.DB) error {
	currentAt := timestamppb.Now()

	{{range $index, $field := $.Message.Fields}}
		{{if $field.SupportsSQLNullType}}
			{{if eq $field.VarName "createdAt"}}
			{{else if eq $field.VarName "updatedAt"}}
			{{else if eq $field.VarName "deletedAt"}}
			{{else}}
				var {{$field.VarName}} {{$field.GoType}}
				if m.{{$field.GoName}} != nil {
					if err := {{$field.VarName}}.Scan(m.{{$field.GoName}}.GetValue()); err != nil {
						return err
					}
				}
			{{end}}
		{{end}}
	{{end}}

	_, err := db.Exec(
		{{.Message.VarName}}InsertStmt,
		{{- range $index, $field := $.Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				{{- if eq $field.VarName "createdAt"}}
					currentAt.AsTime(),
				{{- else if eq $field.VarName "updatedAt"}}
					currentAt.AsTime(),
				{{- else if eq $field.VarName "deletedAt"}}
					nil,
				{{- else}}
					{{$field.VarName}},
				{{- end}}
			{{- else}}
				m.{{$field.GoName}},
			{{- end}}
		{{- end}}
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry 
		}
		return err
	}

	return nil
}

func (m *{{.Message.Name}}) update(db *sql.DB) error {
	currentAt := timestamppb.Now()

	{{range $index, $field := $.Message.Fields}}
		{{if $field.SupportsSQLNullType}}
			{{if eq $field.VarName "createdAt"}}
			{{else if eq $field.VarName "updatedAt"}}
			{{else if eq $field.VarName "deletedAt"}}
			{{else}}
				var {{$field.VarName}} {{$field.GoType}}
				if m.{{$field.GoName}} != nil {
					if err := {{$field.VarName}}.Scan(m.{{$field.GoName}}.GetValue()); err != nil {
						return err
					}
				}
			{{end}}
		{{end}}
	{{end}}

	_, err := db.Exec(
		{{.Message.VarName}}UpdateStmt,
		{{- range $index, $field := $.Message.Fields}}
			{{- if $field.SupportsSQLNullType}}
				{{- if eq $field.VarName "createdAt"}}
					currentAt.AsTime(),
				{{- else if eq $field.VarName "updatedAt"}}
					currentAt.AsTime(),
				{{- else if eq $field.VarName "deletedAt"}}
					nil,
				{{- else}}
					{{$field.VarName}},
				{{- end}}
			{{- else}}
				m.{{$field.GoName}},
			{{- end}}
		{{- end}}
		{{- range $index, $field := .Message.KeyFields}}
			m.{{$field.GoName}},
		{{- end}}
	)
	if err != nil {
		return err
	}

	return nil
}
