package ddl

import (
	"fmt"
	"path"

	"google.golang.org/protobuf/compiler/protogen"
)

func removeExt(filename, ext string) string {
	if path.Ext(filename) == ext {
		return filename[:len(filename)-len(ext)]
	}
	return filename
}

func generatingFilePath(sourceFilePath string) string {
	generatingFilePath := removeExt(sourceFilePath, ".proto")
	generatingFilePath += "_ddl.pb.sql"
	return generatingFilePath
}

func GenerateDDLFiles(version string, gen *protogen.Plugin) error {
	extensionTypes, err := loadAllExtensionTypes(*gen)
	if err != nil {
		return err
	}

	for _, sourceFile := range gen.Files {
		if !sourceFile.Generate {
			continue
		}

		generatedSQLFile := gen.NewGeneratedFile(generatingFilePath(sourceFile.Desc.Path()), protogen.GoImportPath(sourceFile.GoPackageName))

		addFileHead(version, generatedSQLFile, gen, sourceFile)

		for _, message := range sourceFile.Messages {
			mi, err := NewMessageInfo(*message, extensionTypes)
			if err != nil {
				return err
			}

			stmts, err := mi.GenerateDDLSQL()
			if err == ErrNotSupportedDatastore {
				continue
			}
			if err != nil {
				return err
			}

			generatedSQLFile.P(stmts)
		}
	}

	return nil
}

func addFileHead(version string, g *protogen.GeneratedFile, gen *protogen.Plugin, sourceFile *protogen.File) {
	g.P("-- Code generated by protoc-gen-go-ddl. DO NOT EDIT.")
	g.P("-- versions:")
	g.P("-- - protoc-gen-go-ddl v", version)
	g.P("-- - protoc            ", protocVersion(gen))
	if sourceFile.Proto.GetOptions().GetDeprecated() {
		g.P("-- ", sourceFile.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("-- source: ", sourceFile.Desc.Path())
	}
	g.P()
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
