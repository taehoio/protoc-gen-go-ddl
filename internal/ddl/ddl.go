package ddl

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func GenerateDDLFiles(version string, gen *protogen.Plugin) error {
	for _, sourceFile := range gen.Files {
		if !sourceFile.Generate {
			continue
		}

		sqlFileSuffix := "_ddl.pb.sql"
		generatedSQLFile := gen.NewGeneratedFile(sourceFile.GeneratedFilenamePrefix+sqlFileSuffix, sourceFile.GoImportPath)

		addFileHead(version, generatedSQLFile, gen, sourceFile)

		for _, message := range sourceFile.Messages {
			mi, err := NewMessageInfo(*message)
			if err != nil {
				return err
			}

			stmts, err := mi.GenerateDDLSQL()
			if err == ErrNotSupportedDatastore {
				continue
			}
			if err != nil {
				return err
			}
			generatedSQLFile.P(stmts)

			dmlFileSuffix := fmt.Sprintf("_dml_%s.pb.go", strings.ToLower(string(message.Desc.Name())))
			gereratedDMLFile := gen.NewGeneratedFile(sourceFile.GeneratedFilenamePrefix+dmlFileSuffix, sourceFile.GoImportPath)

			d, err := mi.GenerateDMLSQL()
			if err != nil {
				return err
			}
			gereratedDMLFile.P(d)
		}
	}

	return nil
}

func addFileHead(version string, g *protogen.GeneratedFile, gen *protogen.Plugin, sourceFile *protogen.File) {
	g.P("-- Code generated by protoc-gen-go-ddl. DO NOT EDIT.")
	g.P("-- versions:")
	g.P("--  protoc-gen-go-ddl v", version)
	g.P("--  protoc            ", protocVersion(gen))
	if sourceFile.Proto.GetOptions().GetDeprecated() {
		g.P("-- ", sourceFile.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("-- source: ", sourceFile.Desc.Path())
	}
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
