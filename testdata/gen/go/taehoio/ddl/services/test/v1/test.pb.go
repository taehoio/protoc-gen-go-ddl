// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: taehoio/ddl/services/test/v1/test.proto

package testv1

import (
	_ "github.com/taehoio/protoc-gen-go-ddl/gen/go/taehoio/ddl/protobuf/v1"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountryCode int32

const (
	CountryCode_COUNTRY_CODE_UNSPECIFIED CountryCode = 0
	CountryCode_COUNTRY_CODE_KR          CountryCode = 1
	CountryCode_COUNTRY_CODE_CA          CountryCode = 2
	CountryCode_COUNTRY_CODE_GB          CountryCode = 3
	CountryCode_COUNTRY_CODE_JP          CountryCode = 4
)

// Enum value maps for CountryCode.
var (
	CountryCode_name = map[int32]string{
		0: "COUNTRY_CODE_UNSPECIFIED",
		1: "COUNTRY_CODE_KR",
		2: "COUNTRY_CODE_CA",
		3: "COUNTRY_CODE_GB",
		4: "COUNTRY_CODE_JP",
	}
	CountryCode_value = map[string]int32{
		"COUNTRY_CODE_UNSPECIFIED": 0,
		"COUNTRY_CODE_KR":          1,
		"COUNTRY_CODE_CA":          2,
		"COUNTRY_CODE_GB":          3,
		"COUNTRY_CODE_JP":          4,
	}
)

func (x CountryCode) Enum() *CountryCode {
	p := new(CountryCode)
	*p = x
	return p
}

func (x CountryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_taehoio_ddl_services_test_v1_test_proto_enumTypes[0].Descriptor()
}

func (CountryCode) Type() protoreflect.EnumType {
	return &file_taehoio_ddl_services_test_v1_test_proto_enumTypes[0]
}

func (x CountryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryCode.Descriptor instead.
func (CountryCode) EnumDescriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{0}
}

type UserIdType int32

const (
	UserIdType_USER_ID_TYPE_UNSPECIFIED UserIdType = 0
	UserIdType_USER_ID_TYPE_KARROT      UserIdType = 1
	UserIdType_USER_ID_TYPE_HOIAN       UserIdType = 2
)

// Enum value maps for UserIdType.
var (
	UserIdType_name = map[int32]string{
		0: "USER_ID_TYPE_UNSPECIFIED",
		1: "USER_ID_TYPE_KARROT",
		2: "USER_ID_TYPE_HOIAN",
	}
	UserIdType_value = map[string]int32{
		"USER_ID_TYPE_UNSPECIFIED": 0,
		"USER_ID_TYPE_KARROT":      1,
		"USER_ID_TYPE_HOIAN":       2,
	}
)

func (x UserIdType) Enum() *UserIdType {
	p := new(UserIdType)
	*p = x
	return p
}

func (x UserIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_taehoio_ddl_services_test_v1_test_proto_enumTypes[1].Descriptor()
}

func (UserIdType) Type() protoreflect.EnumType {
	return &file_taehoio_ddl_services_test_v1_test_proto_enumTypes[1]
}

func (x UserIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserIdType.Descriptor instead.
func (UserIdType) EnumDescriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{1}
}

type CustomStaticAreaJobStatus int32

const (
	CustomStaticAreaJobStatus_CUSTOM_STATIC_AREA_JOB_STATUS_UNSPECIFIED            CustomStaticAreaJobStatus = 0
	CustomStaticAreaJobStatus_CUSTOM_STATIC_AREA_JOB_STATUS_PROCESSING             CustomStaticAreaJobStatus = 1
	CustomStaticAreaJobStatus_CUSTOM_STATIC_AREA_JOB_STATUS_SUCCESSFULLY_COMPLETED CustomStaticAreaJobStatus = 2
	CustomStaticAreaJobStatus_CUSTOM_STATIC_AREA_JOB_STATUS_FAILED                 CustomStaticAreaJobStatus = 3
)

// Enum value maps for CustomStaticAreaJobStatus.
var (
	CustomStaticAreaJobStatus_name = map[int32]string{
		0: "CUSTOM_STATIC_AREA_JOB_STATUS_UNSPECIFIED",
		1: "CUSTOM_STATIC_AREA_JOB_STATUS_PROCESSING",
		2: "CUSTOM_STATIC_AREA_JOB_STATUS_SUCCESSFULLY_COMPLETED",
		3: "CUSTOM_STATIC_AREA_JOB_STATUS_FAILED",
	}
	CustomStaticAreaJobStatus_value = map[string]int32{
		"CUSTOM_STATIC_AREA_JOB_STATUS_UNSPECIFIED":            0,
		"CUSTOM_STATIC_AREA_JOB_STATUS_PROCESSING":             1,
		"CUSTOM_STATIC_AREA_JOB_STATUS_SUCCESSFULLY_COMPLETED": 2,
		"CUSTOM_STATIC_AREA_JOB_STATUS_FAILED":                 3,
	}
)

func (x CustomStaticAreaJobStatus) Enum() *CustomStaticAreaJobStatus {
	p := new(CustomStaticAreaJobStatus)
	*p = x
	return p
}

func (x CustomStaticAreaJobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomStaticAreaJobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_taehoio_ddl_services_test_v1_test_proto_enumTypes[2].Descriptor()
}

func (CustomStaticAreaJobStatus) Type() protoreflect.EnumType {
	return &file_taehoio_ddl_services_test_v1_test_proto_enumTypes[2]
}

func (x CustomStaticAreaJobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomStaticAreaJobStatus.Descriptor instead.
func (CustomStaticAreaJobStatus) EnumDescriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{2}
}

type CustomStaticAreaJobTriggerType int32

const (
	CustomStaticAreaJobTriggerType_CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_UNSPECIFIED                CustomStaticAreaJobTriggerType = 0
	CustomStaticAreaJobTriggerType_CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_ON_CREATED                 CustomStaticAreaJobTriggerType = 1
	CustomStaticAreaJobTriggerType_CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_ON_USER_MANUALLY_TRIGGERED CustomStaticAreaJobTriggerType = 2
)

// Enum value maps for CustomStaticAreaJobTriggerType.
var (
	CustomStaticAreaJobTriggerType_name = map[int32]string{
		0: "CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_UNSPECIFIED",
		1: "CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_ON_CREATED",
		2: "CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_ON_USER_MANUALLY_TRIGGERED",
	}
	CustomStaticAreaJobTriggerType_value = map[string]int32{
		"CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_UNSPECIFIED":                0,
		"CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_ON_CREATED":                 1,
		"CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_ON_USER_MANUALLY_TRIGGERED": 2,
	}
)

func (x CustomStaticAreaJobTriggerType) Enum() *CustomStaticAreaJobTriggerType {
	p := new(CustomStaticAreaJobTriggerType)
	*p = x
	return p
}

func (x CustomStaticAreaJobTriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomStaticAreaJobTriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_taehoio_ddl_services_test_v1_test_proto_enumTypes[3].Descriptor()
}

func (CustomStaticAreaJobTriggerType) Type() protoreflect.EnumType {
	return &file_taehoio_ddl_services_test_v1_test_proto_enumTypes[3]
}

func (x CustomStaticAreaJobTriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomStaticAreaJobTriggerType.Descriptor instead.
func (CustomStaticAreaJobTriggerType) EnumDescriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{3}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	PasswordHash    string                 `protobuf:"bytes,5,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	FullName        *string                `protobuf:"bytes,6,opt,name=full_name,json=fullName,proto3,oneof" json:"full_name,omitempty"`
	Email           string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	ProfileJson     string                 `protobuf:"bytes,8,opt,name=profile_json,json=profileJson,proto3" json:"profile_json,omitempty"`
	BirthDate       *date.Date             `protobuf:"bytes,9,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	DeathDate       *date.Date             `protobuf:"bytes,10,opt,name=death_date,json=deathDate,proto3,oneof" json:"death_date,omitempty"`
	PhoneNumberE164 string                 `protobuf:"bytes,11,opt,name=phone_number_e164,json=phoneNumberE164,proto3" json:"phone_number_e164,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *User) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *User) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetProfileJson() string {
	if x != nil {
		return x.ProfileJson
	}
	return ""
}

func (x *User) GetBirthDate() *date.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *User) GetDeathDate() *date.Date {
	if x != nil {
		return x.DeathDate
	}
	return nil
}

func (x *User) GetPhoneNumberE164() string {
	if x != nil {
		return x.PhoneNumberE164
	}
	return ""
}

type UserCheckin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	CountryCode        CountryCode            `protobuf:"varint,5,opt,name=country_code,json=countryCode,proto3,enum=taehoio.ddl.services.test.v1.CountryCode" json:"country_code,omitempty"`
	UserIdType         UserIdType             `protobuf:"varint,6,opt,name=user_id_type,json=userIdType,proto3,enum=taehoio.ddl.services.test.v1.UserIdType" json:"user_id_type,omitempty"`
	UserId             string                 `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Latitude           float64                `protobuf:"fixed64,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude          float64                `protobuf:"fixed64,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude           *float64               `protobuf:"fixed64,10,opt,name=altitude,proto3,oneof" json:"altitude,omitempty"`
	HorizontalAccuracy *float64               `protobuf:"fixed64,11,opt,name=horizontal_accuracy,json=horizontalAccuracy,proto3,oneof" json:"horizontal_accuracy,omitempty"`
	VerticalAccuracy   *float64               `protobuf:"fixed64,12,opt,name=vertical_accuracy,json=verticalAccuracy,proto3,oneof" json:"vertical_accuracy,omitempty"`
	MeasuredAt         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=measured_at,json=measuredAt,proto3,oneof" json:"measured_at,omitempty"`
}

func (x *UserCheckin) Reset() {
	*x = UserCheckin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCheckin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCheckin) ProtoMessage() {}

func (x *UserCheckin) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCheckin.ProtoReflect.Descriptor instead.
func (*UserCheckin) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{1}
}

func (x *UserCheckin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserCheckin) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserCheckin) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserCheckin) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *UserCheckin) GetCountryCode() CountryCode {
	if x != nil {
		return x.CountryCode
	}
	return CountryCode_COUNTRY_CODE_UNSPECIFIED
}

func (x *UserCheckin) GetUserIdType() UserIdType {
	if x != nil {
		return x.UserIdType
	}
	return UserIdType_USER_ID_TYPE_UNSPECIFIED
}

func (x *UserCheckin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserCheckin) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UserCheckin) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UserCheckin) GetAltitude() float64 {
	if x != nil && x.Altitude != nil {
		return *x.Altitude
	}
	return 0
}

func (x *UserCheckin) GetHorizontalAccuracy() float64 {
	if x != nil && x.HorizontalAccuracy != nil {
		return *x.HorizontalAccuracy
	}
	return 0
}

func (x *UserCheckin) GetVerticalAccuracy() float64 {
	if x != nil && x.VerticalAccuracy != nil {
		return *x.VerticalAccuracy
	}
	return 0
}

func (x *UserCheckin) GetMeasuredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasuredAt
	}
	return nil
}

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Author      string                 `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Title       string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	PublishedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
}

func (x *Book) Reset() {
	*x = Book{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{2}
}

func (x *Book) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Book) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Book) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Book) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Book) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Book) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Book) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type CustomStaticArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Name        string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	AuthorEmail string                 `protobuf:"bytes,7,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	Geojson     string                 `protobuf:"bytes,9,opt,name=geojson,proto3" json:"geojson,omitempty"`
}

func (x *CustomStaticArea) Reset() {
	*x = CustomStaticArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomStaticArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomStaticArea) ProtoMessage() {}

func (x *CustomStaticArea) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomStaticArea.ProtoReflect.Descriptor instead.
func (*CustomStaticArea) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{3}
}

func (x *CustomStaticArea) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomStaticArea) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomStaticArea) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CustomStaticArea) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *CustomStaticArea) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomStaticArea) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomStaticArea) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *CustomStaticArea) GetGeojson() string {
	if x != nil {
		return x.Geojson
	}
	return ""
}

type CustomStaticAreaJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                 *timestamppb.Timestamp         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                 *timestamppb.Timestamp         `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt                 *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	JobStartedAt              *timestamppb.Timestamp         `protobuf:"bytes,5,opt,name=job_started_at,json=jobStartedAt,proto3,oneof" json:"job_started_at,omitempty"`
	JobFinishedAt             *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=job_finished_at,json=jobFinishedAt,proto3,oneof" json:"job_finished_at,omitempty"`
	CustomStaticAreaId        string                         `protobuf:"bytes,8,opt,name=custom_static_area_id,json=customStaticAreaId,proto3" json:"custom_static_area_id,omitempty"`
	TimeRangeStartsAt         *timestamppb.Timestamp         `protobuf:"bytes,9,opt,name=time_range_starts_at,json=timeRangeStartsAt,proto3" json:"time_range_starts_at,omitempty"`
	TimeRangeEndsAt           *timestamppb.Timestamp         `protobuf:"bytes,10,opt,name=time_range_ends_at,json=timeRangeEndsAt,proto3" json:"time_range_ends_at,omitempty"`
	MinimumCheckedinDaysCount int32                          `protobuf:"varint,12,opt,name=minimum_checkedin_days_count,json=minimumCheckedinDaysCount,proto3" json:"minimum_checkedin_days_count,omitempty"`
	JobStatus                 CustomStaticAreaJobStatus      `protobuf:"varint,14,opt,name=job_status,json=jobStatus,proto3,enum=taehoio.ddl.services.test.v1.CustomStaticAreaJobStatus" json:"job_status,omitempty"`
	JobTriggerType            CustomStaticAreaJobTriggerType `protobuf:"varint,15,opt,name=job_trigger_type,json=jobTriggerType,proto3,enum=taehoio.ddl.services.test.v1.CustomStaticAreaJobTriggerType" json:"job_trigger_type,omitempty"`
}

func (x *CustomStaticAreaJob) Reset() {
	*x = CustomStaticAreaJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomStaticAreaJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomStaticAreaJob) ProtoMessage() {}

func (x *CustomStaticAreaJob) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomStaticAreaJob.ProtoReflect.Descriptor instead.
func (*CustomStaticAreaJob) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{4}
}

func (x *CustomStaticAreaJob) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomStaticAreaJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomStaticAreaJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CustomStaticAreaJob) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *CustomStaticAreaJob) GetJobStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JobStartedAt
	}
	return nil
}

func (x *CustomStaticAreaJob) GetJobFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JobFinishedAt
	}
	return nil
}

func (x *CustomStaticAreaJob) GetCustomStaticAreaId() string {
	if x != nil {
		return x.CustomStaticAreaId
	}
	return ""
}

func (x *CustomStaticAreaJob) GetTimeRangeStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeRangeStartsAt
	}
	return nil
}

func (x *CustomStaticAreaJob) GetTimeRangeEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeRangeEndsAt
	}
	return nil
}

func (x *CustomStaticAreaJob) GetMinimumCheckedinDaysCount() int32 {
	if x != nil {
		return x.MinimumCheckedinDaysCount
	}
	return 0
}

func (x *CustomStaticAreaJob) GetJobStatus() CustomStaticAreaJobStatus {
	if x != nil {
		return x.JobStatus
	}
	return CustomStaticAreaJobStatus_CUSTOM_STATIC_AREA_JOB_STATUS_UNSPECIFIED
}

func (x *CustomStaticAreaJob) GetJobTriggerType() CustomStaticAreaJobTriggerType {
	if x != nil {
		return x.JobTriggerType
	}
	return CustomStaticAreaJobTriggerType_CUSTOM_STATIC_AREA_JOB_TRIGGER_TYPE_UNSPECIFIED
}

type CustomStaticAreaJobUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	CustomStaticAreaJobId uint64                 `protobuf:"varint,5,opt,name=custom_static_area_job_id,json=customStaticAreaJobId,proto3" json:"custom_static_area_job_id,omitempty"`
	UserIdType            UserIdType             `protobuf:"varint,6,opt,name=user_id_type,json=userIdType,proto3,enum=taehoio.ddl.services.test.v1.UserIdType" json:"user_id_type,omitempty"`
	UserId                string                 `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CountryCode           *CountryCode           `protobuf:"varint,8,opt,name=country_code,json=countryCode,proto3,enum=taehoio.ddl.services.test.v1.CountryCode,oneof" json:"country_code,omitempty"`
}

func (x *CustomStaticAreaJobUser) Reset() {
	*x = CustomStaticAreaJobUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomStaticAreaJobUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomStaticAreaJobUser) ProtoMessage() {}

func (x *CustomStaticAreaJobUser) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomStaticAreaJobUser.ProtoReflect.Descriptor instead.
func (*CustomStaticAreaJobUser) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{5}
}

func (x *CustomStaticAreaJobUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomStaticAreaJobUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomStaticAreaJobUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CustomStaticAreaJobUser) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *CustomStaticAreaJobUser) GetCustomStaticAreaJobId() uint64 {
	if x != nil {
		return x.CustomStaticAreaJobId
	}
	return 0
}

func (x *CustomStaticAreaJobUser) GetUserIdType() UserIdType {
	if x != nil {
		return x.UserIdType
	}
	return UserIdType_USER_ID_TYPE_UNSPECIFIED
}

func (x *CustomStaticAreaJobUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CustomStaticAreaJobUser) GetCountryCode() CountryCode {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return CountryCode_COUNTRY_CODE_UNSPECIFIED
}

type TestMongoNestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt      *timestamppb.Timestamp           `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp           `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt      *timestamppb.Timestamp           `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Nested         *TestMongoNestedMessage_Nested   `protobuf:"bytes,5,opt,name=nested,proto3" json:"nested,omitempty"`
	OptionalNested *TestMongoNestedMessage_Nested   `protobuf:"bytes,6,opt,name=optional_nested,json=optionalNested,proto3,oneof" json:"optional_nested,omitempty"`
	RepeatedNested []*TestMongoNestedMessage_Nested `protobuf:"bytes,7,rep,name=repeated_nested,json=repeatedNested,proto3" json:"repeated_nested,omitempty"`
}

func (x *TestMongoNestedMessage) Reset() {
	*x = TestMongoNestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMongoNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMongoNestedMessage) ProtoMessage() {}

func (x *TestMongoNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMongoNestedMessage.ProtoReflect.Descriptor instead.
func (*TestMongoNestedMessage) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{6}
}

func (x *TestMongoNestedMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestMongoNestedMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestMongoNestedMessage) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestMongoNestedMessage) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *TestMongoNestedMessage) GetNested() *TestMongoNestedMessage_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *TestMongoNestedMessage) GetOptionalNested() *TestMongoNestedMessage_Nested {
	if x != nil {
		return x.OptionalNested
	}
	return nil
}

func (x *TestMongoNestedMessage) GetRepeatedNested() []*TestMongoNestedMessage_Nested {
	if x != nil {
		return x.RepeatedNested
	}
	return nil
}

type TestMongoIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Field1    uint64                 `protobuf:"varint,5,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2    *string                `protobuf:"bytes,6,opt,name=field2,proto3,oneof" json:"field2,omitempty"`
	Field3    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=field4,proto3,oneof" json:"field4,omitempty"`
}

func (x *TestMongoIndex) Reset() {
	*x = TestMongoIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMongoIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMongoIndex) ProtoMessage() {}

func (x *TestMongoIndex) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMongoIndex.ProtoReflect.Descriptor instead.
func (*TestMongoIndex) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{7}
}

func (x *TestMongoIndex) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestMongoIndex) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestMongoIndex) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestMongoIndex) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *TestMongoIndex) GetField1() uint64 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *TestMongoIndex) GetField2() string {
	if x != nil && x.Field2 != nil {
		return *x.Field2
	}
	return ""
}

func (x *TestMongoIndex) GetField3() *timestamppb.Timestamp {
	if x != nil {
		return x.Field3
	}
	return nil
}

func (x *TestMongoIndex) GetField4() *timestamppb.Timestamp {
	if x != nil {
		return x.Field4
	}
	return nil
}

type TestMongoUint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Uint64Field         uint64                 `protobuf:"varint,5,opt,name=uint64_field,json=uint64Field,proto3" json:"uint64_field,omitempty"`
	OptionalUint64Field *uint64                `protobuf:"varint,6,opt,name=optional_uint64_field,json=optionalUint64Field,proto3,oneof" json:"optional_uint64_field,omitempty"`
}

func (x *TestMongoUint) Reset() {
	*x = TestMongoUint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMongoUint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMongoUint) ProtoMessage() {}

func (x *TestMongoUint) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMongoUint.ProtoReflect.Descriptor instead.
func (*TestMongoUint) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{8}
}

func (x *TestMongoUint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestMongoUint) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestMongoUint) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestMongoUint) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *TestMongoUint) GetUint64Field() uint64 {
	if x != nil {
		return x.Uint64Field
	}
	return 0
}

func (x *TestMongoUint) GetOptionalUint64Field() uint64 {
	if x != nil && x.OptionalUint64Field != nil {
		return *x.OptionalUint64Field
	}
	return 0
}

type TestMongoNestedMessage_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1      string                         `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2      uint64                         `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	CycleNested *TestMongoNestedMessage_Nested `protobuf:"bytes,3,opt,name=cycle_nested,json=cycleNested,proto3" json:"cycle_nested,omitempty"`
}

func (x *TestMongoNestedMessage_Nested) Reset() {
	*x = TestMongoNestedMessage_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMongoNestedMessage_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMongoNestedMessage_Nested) ProtoMessage() {}

func (x *TestMongoNestedMessage_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMongoNestedMessage_Nested.ProtoReflect.Descriptor instead.
func (*TestMongoNestedMessage_Nested) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TestMongoNestedMessage_Nested) GetField1() string {
	if x != nil {
		return x.Field1
	}
	return ""
}

func (x *TestMongoNestedMessage_Nested) GetField2() uint64 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *TestMongoNestedMessage_Nested) GetCycleNested() *TestMongoNestedMessage_Nested {
	if x != nil {
		return x.CycleNested
	}
	return nil
}

var File_taehoio_ddl_services_test_v1_test_proto protoreflect.FileDescriptor

var file_taehoio_ddl_services_test_v1_test_proto_rawDesc = []byte{
	0x0a, 0x27, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2f, 0x64, 0x64, 0x6c, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x74, 0x61, 0x65, 0x68, 0x6f,
	0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2f, 0x64, 0x64, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xc8, 0xe4,
	0x1d, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0xe4, 0x1d, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56,
	0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x28, 0x31, 0x30, 0x30, 0x29, 0x48, 0x01, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xd2, 0xe4, 0x1d, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x69, 0x64, 0x78, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xe4, 0x1d, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x54, 0x45, 0x58, 0x54, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48,
	0x02, 0x52, 0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x65, 0x31, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x31, 0x36, 0x34, 0x3a, 0x04, 0x88, 0xa6, 0x1d,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xcb, 0x07,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x34, 0xd2, 0xe4, 0x1d,
	0x30, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x61,
	0x74, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e,
	0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x34, 0xd2, 0xe4, 0x1d, 0x30, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x61, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0xd2, 0xe4, 0x1d, 0x30, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x61, 0x74, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x12, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x10,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x34, 0xd2, 0xe4, 0x1d, 0x30, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x61, 0x74, 0x48, 0x04, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xa6, 0x1d,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xe2, 0x03, 0x0a, 0x04,
	0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x50, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x38, 0xd2, 0xe4, 0x1d, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xd2, 0xe4, 0x1d, 0x1c, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x32, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x38, 0xd2, 0xe4, 0x1d, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xd2, 0xe4, 0x1d, 0x1c, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x31, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x18, 0xd2, 0xe4, 0x1d, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69,
	0x78, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x04, 0x88, 0xa6, 0x1d,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x22, 0xe6, 0x02, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x72, 0x65, 0x61, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x97, 0x07, 0x0a, 0x13, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4a, 0x6f,
	0x62, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xc8,
	0xe4, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x0e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0d, 0x6a, 0x6f, 0x62,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a,
	0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xd2, 0xe4,
	0x1d, 0x1a, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x61, 0x69, 0x64, 0x52, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x47, 0x0a,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x61,
	0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x66, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x61, 0x65, 0x68,
	0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4a, 0x6f, 0x62, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0xc5, 0x06, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4a, 0x6f, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xc8, 0xe4, 0x1d,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x68, 0xd2, 0xe4, 0x1d, 0x1d, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x61, 0x6a, 0x6f, 0x62,
	0x69, 0x64, 0xda, 0xe4, 0x1d, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x78, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x61, 0x6a, 0x6f,
	0x62, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64,
	0x65, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x31, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x93, 0x01, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69,
	0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x47, 0xda, 0xe4, 0x1d, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x78, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x61, 0x6a,
	0x6f, 0x62, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f,
	0x64, 0x65, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x32, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0xda, 0xe4, 0x1d, 0x43, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x75, 0x78, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x72, 0x65, 0x61, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x33,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x47, 0xda, 0xe4, 0x1d, 0x43,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x78, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x61, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x3d, 0x34, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xce, 0x05, 0x0a, 0x16,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x53, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52,
	0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x61,
	0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x98, 0x01, 0x0a, 0x06, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x32, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x61, 0x65, 0x68,
	0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0xcc, 0x05, 0x0a,
	0x0e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xe4, 0x1d,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x79, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x39, 0xd2, 0xe4, 0x1d,
	0x11, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x61, 0x74, 0xd2, 0xe4, 0x1d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x2c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x3d, 0x31, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x53, 0xd2, 0xe4, 0x1d, 0x2b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x69, 0x78, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x33, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x2c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x34, 0xd2, 0xe4, 0x1d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x69, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x31, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x32, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x31, 0x12, 0x4c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0xd2, 0xe4, 0x1d, 0x2b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x2c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x3d, 0x33, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x63, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2f, 0xd2,
	0xe4, 0x1d, 0x2b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x32, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x68, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x2f, 0xd2, 0xe4, 0x1d, 0x2b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x78, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x2c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x3d, 0x31, 0x48, 0x02, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x88, 0x01, 0x01,
	0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x22, 0xe6, 0x02, 0x0a, 0x0d,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x15,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x13, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x2a, 0x7f, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4b, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x42, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4a, 0x50, 0x10, 0x04, 0x2a, 0x5b, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4b, 0x41, 0x52, 0x52, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x49, 0x41, 0x4e,
	0x10, 0x02, 0x2a, 0xdc, 0x01, 0x0a, 0x19, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2d, 0x0a, 0x29, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x2c, 0x0a, 0x28, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43,
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x38, 0x0a,
	0x34, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xcd, 0x01, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4a, 0x6f, 0x62, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x42, 0x0a,
	0x3e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x64, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x64, 0x64, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taehoio_ddl_services_test_v1_test_proto_rawDescOnce sync.Once
	file_taehoio_ddl_services_test_v1_test_proto_rawDescData = file_taehoio_ddl_services_test_v1_test_proto_rawDesc
)

func file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP() []byte {
	file_taehoio_ddl_services_test_v1_test_proto_rawDescOnce.Do(func() {
		file_taehoio_ddl_services_test_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_taehoio_ddl_services_test_v1_test_proto_rawDescData)
	})
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescData
}

var file_taehoio_ddl_services_test_v1_test_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_taehoio_ddl_services_test_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_taehoio_ddl_services_test_v1_test_proto_goTypes = []interface{}{
	(CountryCode)(0),                      // 0: taehoio.ddl.services.test.v1.CountryCode
	(UserIdType)(0),                       // 1: taehoio.ddl.services.test.v1.UserIdType
	(CustomStaticAreaJobStatus)(0),        // 2: taehoio.ddl.services.test.v1.CustomStaticAreaJobStatus
	(CustomStaticAreaJobTriggerType)(0),   // 3: taehoio.ddl.services.test.v1.CustomStaticAreaJobTriggerType
	(*User)(nil),                          // 4: taehoio.ddl.services.test.v1.User
	(*UserCheckin)(nil),                   // 5: taehoio.ddl.services.test.v1.UserCheckin
	(*Book)(nil),                          // 6: taehoio.ddl.services.test.v1.Book
	(*CustomStaticArea)(nil),              // 7: taehoio.ddl.services.test.v1.CustomStaticArea
	(*CustomStaticAreaJob)(nil),           // 8: taehoio.ddl.services.test.v1.CustomStaticAreaJob
	(*CustomStaticAreaJobUser)(nil),       // 9: taehoio.ddl.services.test.v1.CustomStaticAreaJobUser
	(*TestMongoNestedMessage)(nil),        // 10: taehoio.ddl.services.test.v1.TestMongoNestedMessage
	(*TestMongoIndex)(nil),                // 11: taehoio.ddl.services.test.v1.TestMongoIndex
	(*TestMongoUint)(nil),                 // 12: taehoio.ddl.services.test.v1.TestMongoUint
	(*TestMongoNestedMessage_Nested)(nil), // 13: taehoio.ddl.services.test.v1.TestMongoNestedMessage.Nested
	(*timestamppb.Timestamp)(nil),         // 14: google.protobuf.Timestamp
	(*date.Date)(nil),                     // 15: google.type.Date
}
var file_taehoio_ddl_services_test_v1_test_proto_depIdxs = []int32{
	14, // 0: taehoio.ddl.services.test.v1.User.created_at:type_name -> google.protobuf.Timestamp
	14, // 1: taehoio.ddl.services.test.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	14, // 2: taehoio.ddl.services.test.v1.User.deleted_at:type_name -> google.protobuf.Timestamp
	15, // 3: taehoio.ddl.services.test.v1.User.birth_date:type_name -> google.type.Date
	15, // 4: taehoio.ddl.services.test.v1.User.death_date:type_name -> google.type.Date
	14, // 5: taehoio.ddl.services.test.v1.UserCheckin.created_at:type_name -> google.protobuf.Timestamp
	14, // 6: taehoio.ddl.services.test.v1.UserCheckin.updated_at:type_name -> google.protobuf.Timestamp
	14, // 7: taehoio.ddl.services.test.v1.UserCheckin.deleted_at:type_name -> google.protobuf.Timestamp
	0,  // 8: taehoio.ddl.services.test.v1.UserCheckin.country_code:type_name -> taehoio.ddl.services.test.v1.CountryCode
	1,  // 9: taehoio.ddl.services.test.v1.UserCheckin.user_id_type:type_name -> taehoio.ddl.services.test.v1.UserIdType
	14, // 10: taehoio.ddl.services.test.v1.UserCheckin.measured_at:type_name -> google.protobuf.Timestamp
	14, // 11: taehoio.ddl.services.test.v1.Book.created_at:type_name -> google.protobuf.Timestamp
	14, // 12: taehoio.ddl.services.test.v1.Book.updated_at:type_name -> google.protobuf.Timestamp
	14, // 13: taehoio.ddl.services.test.v1.Book.deleted_at:type_name -> google.protobuf.Timestamp
	14, // 14: taehoio.ddl.services.test.v1.Book.published_at:type_name -> google.protobuf.Timestamp
	14, // 15: taehoio.ddl.services.test.v1.CustomStaticArea.created_at:type_name -> google.protobuf.Timestamp
	14, // 16: taehoio.ddl.services.test.v1.CustomStaticArea.updated_at:type_name -> google.protobuf.Timestamp
	14, // 17: taehoio.ddl.services.test.v1.CustomStaticArea.deleted_at:type_name -> google.protobuf.Timestamp
	14, // 18: taehoio.ddl.services.test.v1.CustomStaticAreaJob.created_at:type_name -> google.protobuf.Timestamp
	14, // 19: taehoio.ddl.services.test.v1.CustomStaticAreaJob.updated_at:type_name -> google.protobuf.Timestamp
	14, // 20: taehoio.ddl.services.test.v1.CustomStaticAreaJob.deleted_at:type_name -> google.protobuf.Timestamp
	14, // 21: taehoio.ddl.services.test.v1.CustomStaticAreaJob.job_started_at:type_name -> google.protobuf.Timestamp
	14, // 22: taehoio.ddl.services.test.v1.CustomStaticAreaJob.job_finished_at:type_name -> google.protobuf.Timestamp
	14, // 23: taehoio.ddl.services.test.v1.CustomStaticAreaJob.time_range_starts_at:type_name -> google.protobuf.Timestamp
	14, // 24: taehoio.ddl.services.test.v1.CustomStaticAreaJob.time_range_ends_at:type_name -> google.protobuf.Timestamp
	2,  // 25: taehoio.ddl.services.test.v1.CustomStaticAreaJob.job_status:type_name -> taehoio.ddl.services.test.v1.CustomStaticAreaJobStatus
	3,  // 26: taehoio.ddl.services.test.v1.CustomStaticAreaJob.job_trigger_type:type_name -> taehoio.ddl.services.test.v1.CustomStaticAreaJobTriggerType
	14, // 27: taehoio.ddl.services.test.v1.CustomStaticAreaJobUser.created_at:type_name -> google.protobuf.Timestamp
	14, // 28: taehoio.ddl.services.test.v1.CustomStaticAreaJobUser.updated_at:type_name -> google.protobuf.Timestamp
	14, // 29: taehoio.ddl.services.test.v1.CustomStaticAreaJobUser.deleted_at:type_name -> google.protobuf.Timestamp
	1,  // 30: taehoio.ddl.services.test.v1.CustomStaticAreaJobUser.user_id_type:type_name -> taehoio.ddl.services.test.v1.UserIdType
	0,  // 31: taehoio.ddl.services.test.v1.CustomStaticAreaJobUser.country_code:type_name -> taehoio.ddl.services.test.v1.CountryCode
	14, // 32: taehoio.ddl.services.test.v1.TestMongoNestedMessage.created_at:type_name -> google.protobuf.Timestamp
	14, // 33: taehoio.ddl.services.test.v1.TestMongoNestedMessage.updated_at:type_name -> google.protobuf.Timestamp
	14, // 34: taehoio.ddl.services.test.v1.TestMongoNestedMessage.deleted_at:type_name -> google.protobuf.Timestamp
	13, // 35: taehoio.ddl.services.test.v1.TestMongoNestedMessage.nested:type_name -> taehoio.ddl.services.test.v1.TestMongoNestedMessage.Nested
	13, // 36: taehoio.ddl.services.test.v1.TestMongoNestedMessage.optional_nested:type_name -> taehoio.ddl.services.test.v1.TestMongoNestedMessage.Nested
	13, // 37: taehoio.ddl.services.test.v1.TestMongoNestedMessage.repeated_nested:type_name -> taehoio.ddl.services.test.v1.TestMongoNestedMessage.Nested
	14, // 38: taehoio.ddl.services.test.v1.TestMongoIndex.created_at:type_name -> google.protobuf.Timestamp
	14, // 39: taehoio.ddl.services.test.v1.TestMongoIndex.updated_at:type_name -> google.protobuf.Timestamp
	14, // 40: taehoio.ddl.services.test.v1.TestMongoIndex.deleted_at:type_name -> google.protobuf.Timestamp
	14, // 41: taehoio.ddl.services.test.v1.TestMongoIndex.field3:type_name -> google.protobuf.Timestamp
	14, // 42: taehoio.ddl.services.test.v1.TestMongoIndex.field4:type_name -> google.protobuf.Timestamp
	14, // 43: taehoio.ddl.services.test.v1.TestMongoUint.created_at:type_name -> google.protobuf.Timestamp
	14, // 44: taehoio.ddl.services.test.v1.TestMongoUint.updated_at:type_name -> google.protobuf.Timestamp
	14, // 45: taehoio.ddl.services.test.v1.TestMongoUint.deleted_at:type_name -> google.protobuf.Timestamp
	13, // 46: taehoio.ddl.services.test.v1.TestMongoNestedMessage.Nested.cycle_nested:type_name -> taehoio.ddl.services.test.v1.TestMongoNestedMessage.Nested
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_taehoio_ddl_services_test_v1_test_proto_init() }
func file_taehoio_ddl_services_test_v1_test_proto_init() {
	if File_taehoio_ddl_services_test_v1_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCheckin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomStaticArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomStaticAreaJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomStaticAreaJobUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMongoNestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMongoIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMongoUint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMongoNestedMessage_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taehoio_ddl_services_test_v1_test_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_taehoio_ddl_services_test_v1_test_proto_goTypes,
		DependencyIndexes: file_taehoio_ddl_services_test_v1_test_proto_depIdxs,
		EnumInfos:         file_taehoio_ddl_services_test_v1_test_proto_enumTypes,
		MessageInfos:      file_taehoio_ddl_services_test_v1_test_proto_msgTypes,
	}.Build()
	File_taehoio_ddl_services_test_v1_test_proto = out.File
	file_taehoio_ddl_services_test_v1_test_proto_rawDesc = nil
	file_taehoio_ddl_services_test_v1_test_proto_goTypes = nil
	file_taehoio_ddl_services_test_v1_test_proto_depIdxs = nil
}
