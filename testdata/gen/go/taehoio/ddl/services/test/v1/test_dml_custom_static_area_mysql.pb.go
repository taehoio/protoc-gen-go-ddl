// Code generated by protoc-gen-go-ddl. DO NOT EDIT.
// versions:
//  protoc-gen-go-ddl v0.0.1-alpha
//  protoc            (unknown)
// source: taehoio/ddl/services/test/v1/test.proto

package testv1

import (
	"context"
	"database/sql"
	"strings"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
)

//go:generate mockgen -package testv1 -self_package "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" -source ./test_dml_custom_static_area_mysql.pb.go -destination ./test_dml_custom_static_area_mysql_mock.pb.go -mock_names CustomStaticAreaRecorder=MockCustomStaticAreaRecorder "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" CustomStaticAreaRecorder

const (
	customStaticAreaInsertStmt = "INSERT INTO `custom_static_area` " + `(
			id, created_at, updated_at, deleted_at, name, description, author_email, geojson
		) VALUES (
			?, ?, ?, ?, ?, ?, ?, ?
		)
	`

	customStaticAreaUpdateStmt = "UPDATE `custom_static_area` SET" + `
			id = ?, created_at = ?, updated_at = ?, deleted_at = ?, name = ?, description = ?, author_email = ?, geojson = ?
		WHERE
			id = ?
	`

	customStaticAreaDeleteStmt = "UPDATE `custom_static_area` SET" + `
            deleted_at = ?
        WHERE
            id = ?
    `
)

var (
	_ = timestamppb.Timestamp{}
)

type CustomStaticAreaRecorder interface {
	Get(ctx context.Context, db *sql.DB, id int64) (*CustomStaticArea, error)
	List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*CustomStaticArea, error)
	FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*CustomStaticArea, error)
	Save(ctx context.Context, db *sql.DB, message *CustomStaticArea) error
	SaveTx(ctx context.Context, tx *sql.Tx, message *CustomStaticArea) error
	Delete(ctx context.Context, db *sql.DB, id int64) error
	DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error
}

func (m *CustomStaticArea) Get(ctx context.Context, db *sql.DB, id int64) (*CustomStaticArea, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, name, description, author_email, geojson"+
		" FROM `custom_static_area` WHERE id = ? AND deleted_at IS NULL LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm CustomStaticArea

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.Name,
		&mm.Description,
		&mm.AuthorEmail,
		&mm.Geojson,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}

	return &mm, nil
}

func (m *CustomStaticArea) List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*CustomStaticArea, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, name, description, author_email, geojson" +
		" FROM `custom_static_area` WHERE deleted_at IS NULL"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*CustomStaticArea

	for rows.Next() {
		var mm CustomStaticArea

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.Name,
			&mm.Description,
			&mm.AuthorEmail,
			&mm.Geojson,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *CustomStaticArea) FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*CustomStaticArea, error) {
	if len(ids) == 0 {
		return nil, nil
	}

	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, name, description, author_email, geojson" +
		" FROM `custom_static_area` WHERE deleted_at IS NULL AND id IN ("
	for i := range ids {
		if i > 0 {
			q += ", "
		}
		q += "?"
	}
	q += ")"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	for _, id := range ids {
		args = append(args, id)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*CustomStaticArea

	for rows.Next() {
		var mm CustomStaticArea

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.Name,
			&mm.Description,
			&mm.AuthorEmail,
			&mm.Geojson,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *CustomStaticArea) Save(ctx context.Context, db *sql.DB, message *CustomStaticArea) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.Get(ctx, db, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insert(ctx, db, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.update(ctx, db, message); err != nil {
			return err
		}
	}

	mm, err = m.Get(ctx, db, message.Id)
	if err != nil {
		return err
	}

	proto.Merge(message, mm)

	return nil
}

func (m *CustomStaticArea) insert(ctx context.Context, db *sql.DB, message *CustomStaticArea) error {
	currentAt := timestamppb.Now()

	_, err := db.ExecContext(
		ctx,
		customStaticAreaInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Name,
		message.Description,
		message.AuthorEmail,
		message.Geojson,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *CustomStaticArea) update(ctx context.Context, db *sql.DB, message *CustomStaticArea) error {
	currentAt := timestamppb.Now()

	_, err := db.ExecContext(
		ctx,
		customStaticAreaUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Name,
		message.Description,
		message.AuthorEmail,
		message.Geojson,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticArea) Delete(ctx context.Context, db *sql.DB, id int64) error {
	currentAt := timestamppb.Now()

	_, err := db.ExecContext(
		ctx,
		customStaticAreaDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticArea) DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error {
	currentAt := timestamppb.Now()

	_, err := tx.ExecContext(
		ctx,
		customStaticAreaDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticArea) SaveTx(ctx context.Context, tx *sql.Tx, message *CustomStaticArea) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.getTx(ctx, tx, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insertTx(ctx, tx, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.updateTx(ctx, tx, message); err != nil {
			return err
		}
	}

	return nil
}

func (m *CustomStaticArea) insertTx(ctx context.Context, tx *sql.Tx, message *CustomStaticArea) error {
	currentAt := timestamppb.Now()

	_, err := tx.ExecContext(
		ctx,
		customStaticAreaInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Name,
		message.Description,
		message.AuthorEmail,
		message.Geojson,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *CustomStaticArea) updateTx(ctx context.Context, tx *sql.Tx, message *CustomStaticArea) error {
	currentAt := timestamppb.Now()

	_, err := tx.ExecContext(
		ctx,
		customStaticAreaUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Name,
		message.Description,
		message.AuthorEmail,
		message.Geojson,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticArea) getTx(ctx context.Context, tx *sql.Tx, id int64) (*CustomStaticArea, error) {
	stmt, err := tx.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, name, description, author_email, geojson"+
		" FROM `custom_static_area` WHERE id = ? AND deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm CustomStaticArea

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.Name,
		&mm.Description,
		&mm.AuthorEmail,
		&mm.Geojson,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}

	return &mm, nil
}
