// Code generated by protoc-gen-go-ddl. DO NOT EDIT.
// versions:
//  protoc-gen-go-ddl v0.0.1-alpha
//  protoc            (unknown)
// source: taehoio/ddl/services/test/v1/test.proto

package testv1

import (
	"context"
	"errors"
	"strconv"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
)

//go:generate mockgen -package testv1 -self_package "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" -source ./test_dml_test_mongo_nested_message_mongodb.pb.go -destination ./test_dml_test_mongo_nested_message_mongodb_mock.pb.go -mock_names TestMongoNestedMessageRecorder=MockTestMongoNestedMessageRecorder "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" TestMongoNestedMessageRecorder

const (
	testMongoNestedMessageCollectionName = "test_mongo_nested_message"
)

var (
	_ strconv.NumError
	_ time.Time
	_ bson.M
	_ primitive.DateTime
	_ proto.Message
	_ timestamppb.Timestamp
)

type TestMongoNestedMessageRecorder interface {
	Get(ctx context.Context, db *mongo.Database, id string) (*TestMongoNestedMessage, error)
	List(ctx context.Context, db *mongo.Database) ([]*TestMongoNestedMessage, error)
	FindByIDs(ctx context.Context, db *mongo.Database, ids []string) ([]*TestMongoNestedMessage, error)
	Save(ctx context.Context, db *mongo.Database, message *TestMongoNestedMessage) error
	Delete(ctx context.Context, db *mongo.Database, id string) error
}

var _ TestMongoNestedMessageRecorder = (*TestMongoNestedMessage)(nil)

func (m *TestMongoNestedMessage) Get(ctx context.Context, db *mongo.Database, id string) (*TestMongoNestedMessage, error) {
	coll := db.Collection(testMongoNestedMessageCollectionName)
	return m.get(ctx, coll, id)
}

func (m *TestMongoNestedMessage) List(ctx context.Context, db *mongo.Database) ([]*TestMongoNestedMessage, error) {
	coll := db.Collection(testMongoNestedMessageCollectionName)

	cursor, err := coll.Find(ctx, bson.D{{"deleted_at", nil}})
	if err != nil {
		return nil, err
	}

	var docs []*testMongoNestedMessageDocument
	if err := cursor.All(ctx, &docs); err != nil {
		return nil, err
	}

	pb, err := testMongoNestedMessageDocumentsToProto(docs)
	if err != nil {
		return nil, err
	}

	return pb, nil
}

func (m *TestMongoNestedMessage) FindByIDs(ctx context.Context, db *mongo.Database, ids []string) ([]*TestMongoNestedMessage, error) {
	coll := db.Collection(testMongoNestedMessageCollectionName)

	filter := bson.D{{"$and", bson.A{
		bson.D{{Key: "id", Value: bson.D{{Key: "$in", Value: ids}}}},
		bson.D{{Key: "deleted_at", Value: nil}},
	}}}

	cursor, err := coll.Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	var docs []*testMongoNestedMessageDocument
	if err := cursor.All(ctx, &docs); err != nil {
		return nil, err
	}

	pb, err := testMongoNestedMessageDocumentsToProto(docs)
	if err != nil {
		return nil, err
	}

	return pb, nil
}

func (m *TestMongoNestedMessage) Save(ctx context.Context, db *mongo.Database, message *TestMongoNestedMessage) error {
	if message.Id == "" {
		return ErrIDNotExist
	}

	coll := db.Collection(testMongoNestedMessageCollectionName)

	stored, err := m.get(ctx, coll, message.Id)
	if err != nil && !errors.Is(err, ErrNotFound) {
		return err
	}

	if stored == nil {
		if err := m.insert(ctx, coll, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = stored.CreatedAt
		if err := m.update(ctx, coll, message); err != nil {
			return err
		}
	}

	return nil
}

func (m *TestMongoNestedMessage) Delete(ctx context.Context, db *mongo.Database, id string) error {
	coll := db.Collection(testMongoNestedMessageCollectionName)

	now := time.Now()
	filter := bson.D{{Key: "id", Value: id}}
	value := bson.D{{Key: "$set", Value: bson.D{{
		Key:   "deleted_at",
		Value: primitive.NewDateTimeFromTime(now)}},
	}}
	if _, err := coll.UpdateOne(ctx, filter, value); err != nil {
		return err
	}
	return nil
}

func (m *TestMongoNestedMessage) get(ctx context.Context, coll *mongo.Collection, id string) (*TestMongoNestedMessage, error) {
	filter := bson.D{{Key: "$and", Value: bson.A{
		bson.D{{Key: "id", Value: id}},
		bson.D{{Key: "deleted_at", Value: nil}},
	}}}

	var doc testMongoNestedMessageDocument
	if err := coll.FindOne(ctx, filter).Decode(&doc); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, ErrNotFound
		}
		return nil, err
	}

	pb, err := doc.toProto()
	if err != nil {
		return nil, err
	}

	return pb, nil
}

func (m *TestMongoNestedMessage) insert(ctx context.Context, coll *mongo.Collection, message *TestMongoNestedMessage) error {
	now := timestamppb.Now()
	if message.CreatedAt == nil {
		message.CreatedAt = now
	}
	message.UpdatedAt = now

	if _, err := coll.InsertOne(ctx, testMongoNestedMessageDocumentFromProto(message)); err != nil {
		if mongo.IsDuplicateKeyError(err) {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *TestMongoNestedMessage) update(ctx context.Context, coll *mongo.Collection, message *TestMongoNestedMessage) error {
	message.UpdatedAt = timestamppb.Now()

	filter := bson.D{{Key: "id", Value: message.Id}}
	value := bson.D{{Key: "$set", Value: testMongoNestedMessageDocumentFromProto(message)}}
	if _, err := coll.UpdateOne(ctx, filter, value); err != nil {
		return err
	}

	return nil
}

func testMongoNestedMessageDocumentsToProto(docs []*testMongoNestedMessageDocument) ([]*TestMongoNestedMessage, error) {
	result := make([]*TestMongoNestedMessage, len(docs))

	for i, doc := range docs {
		pb, err := doc.toProto()
		if err != nil {
			return nil, err
		}
		result[i] = pb
	}

	return result, nil
}

type testMongoNestedMessageDocument struct {
	Id             string                                  `bson:"id"`
	CreatedAt      primitive.DateTime                      `bson:"created_at"`
	UpdatedAt      primitive.DateTime                      `bson:"updated_at"`
	DeletedAt      *primitive.DateTime                     `bson:"deleted_at"`
	Nested         *testMongoNestedMessageNestedDocument   `bson:"nested"`
	OptionalNested *testMongoNestedMessageNestedDocument   `bson:"optional_nested"`
	RepeatedNested []*testMongoNestedMessageNestedDocument `bson:"repeated_nested"`
}

func (doc *testMongoNestedMessageDocument) toProto() (*TestMongoNestedMessage, error) {
	if doc == nil {
		return nil, nil
	}

	result := &TestMongoNestedMessage{
		Id:        doc.Id,
		CreatedAt: timestamppb.New(doc.CreatedAt.Time()),
		UpdatedAt: timestamppb.New(doc.UpdatedAt.Time()),
	}

	if doc.DeletedAt != nil {
		result.DeletedAt = timestamppb.New(doc.DeletedAt.Time())
	}

	if pb, err := doc.Nested.toProto(); err != nil {
		return nil, err
	} else {
		result.Nested = pb
	}

	if pb, err := doc.OptionalNested.toProto(); err != nil {
		return nil, err
	} else {
		result.OptionalNested = pb
	}

	if pb, err := testMongoNestedMessageNestedDocumentsToProto(doc.RepeatedNested); err != nil {
		return nil, err
	} else {
		result.RepeatedNested = pb
	}

	return result, nil
}

func testMongoNestedMessageDocumentFromProto(pb *TestMongoNestedMessage) *testMongoNestedMessageDocument {
	if pb == nil {
		return nil
	}

	result := &testMongoNestedMessageDocument{
		Id:        pb.Id,
		CreatedAt: primitive.NewDateTimeFromTime(pb.CreatedAt.AsTime()),
		UpdatedAt: primitive.NewDateTimeFromTime(pb.UpdatedAt.AsTime()),
		Nested:    testMongoNestedMessageNestedDocumentFromProto(pb.Nested),
	}

	if pb.DeletedAt != nil {
		deletedAt := primitive.NewDateTimeFromTime(pb.DeletedAt.AsTime())
		result.DeletedAt = &deletedAt
	}

	if pb.OptionalNested != nil {
		result.OptionalNested = testMongoNestedMessageNestedDocumentFromProto(pb.OptionalNested)
	}

	for _, e := range pb.RepeatedNested {
		result.RepeatedNested = append(result.RepeatedNested, testMongoNestedMessageNestedDocumentFromProto(e))
	}

	return result
}

func testMongoNestedMessageNestedDocumentsToProto(docs []*testMongoNestedMessageNestedDocument) ([]*TestMongoNestedMessage_Nested, error) {
	result := make([]*TestMongoNestedMessage_Nested, len(docs))

	for i, doc := range docs {
		pb, err := doc.toProto()
		if err != nil {
			return nil, err
		}
		result[i] = pb
	}

	return result, nil
}

type testMongoNestedMessageNestedDocument struct {
	Field1      string                                `bson:"field1"`
	Field2      string                                `bson:"field2"`
	CycleNested *testMongoNestedMessageNestedDocument `bson:"cycle_nested"`
}

func (doc *testMongoNestedMessageNestedDocument) toProto() (*TestMongoNestedMessage_Nested, error) {
	if doc == nil {
		return nil, nil
	}

	result := &TestMongoNestedMessage_Nested{
		Field1: doc.Field1,
	}

	if u64, err := strconv.ParseUint(doc.Field2, 10, 64); err != nil {
		return nil, err
	} else {
		result.Field2 = u64
	}

	if pb, err := doc.CycleNested.toProto(); err != nil {
		return nil, err
	} else {
		result.CycleNested = pb
	}

	return result, nil
}

func testMongoNestedMessageNestedDocumentFromProto(pb *TestMongoNestedMessage_Nested) *testMongoNestedMessageNestedDocument {
	if pb == nil {
		return nil
	}

	result := &testMongoNestedMessageNestedDocument{
		Field1:      pb.Field1,
		Field2:      strconv.FormatUint(pb.Field2, 10),
		CycleNested: testMongoNestedMessageNestedDocumentFromProto(pb.CycleNested),
	}

	return result
}
