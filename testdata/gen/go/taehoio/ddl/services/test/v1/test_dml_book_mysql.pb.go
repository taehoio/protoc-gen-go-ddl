// Code generated by protoc-gen-go-ddl. DO NOT EDIT.
// versions:
//  protoc-gen-go-ddl v0.0.1-alpha
//  protoc            (unknown)
// source: taehoio/ddl/services/test/v1/test.proto

package testv1

import (
	"context"
	"database/sql"
	"strings"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
)

//go:generate mockgen -package testv1 -self_package "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" -source ./test_dml_book_mysql.pb.go -destination ./test_dml_book_mysql_mock.pb.go -mock_names BookRecorder=MockBookRecorder "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" BookRecorder

const (
	bookInsertStmt = "INSERT INTO `book` " + `(
			id, created_at, updated_at, deleted_at, author, title, published_at
		) VALUES (
			?, ?, ?, ?, ?, ?, ?
		)
	`

	bookUpdateStmt = "UPDATE `book` SET" + `
			id = ?, created_at = ?, updated_at = ?, deleted_at = ?, author = ?, title = ?, published_at = ?
		WHERE
			id = ?
	`

	bookDeleteStmt = "UPDATE `book` SET" + `
            deleted_at = ?
        WHERE
            id = ?
    `
)

var (
	_ = timestamppb.Timestamp{}
)

type BookRecorder interface {
	Get(ctx context.Context, db *sql.DB, id int64) (*Book, error)
	List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*Book, error)
	FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*Book, error)
	Save(ctx context.Context, db *sql.DB, message *Book) error
	SaveTx(ctx context.Context, tx *sql.Tx, message *Book) error
	Delete(ctx context.Context, db *sql.DB, id int64) error
	DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error
	FindOneByAuthorAndTitle(ctx context.Context, db *sql.DB, author interface{}, title interface{}) (*Book, error)
	FindByAuthorAndTitle(ctx context.Context, db *sql.DB, author interface{}, title interface{}, paginationOpts ...PaginationOption) ([]*Book, error)
	DeleteByAuthorAndTitle(ctx context.Context, db *sql.DB, author interface{}, title interface{}) error
	FindOneByPublishedAt(ctx context.Context, db *sql.DB, publishedAtStartTime interface{}, publishedAtEndTime interface{}) (*Book, error)
	FindByPublishedAt(ctx context.Context, db *sql.DB, publishedAtStartTime interface{}, publishedAtEndTime interface{}, paginationOpts ...PaginationOption) ([]*Book, error)
	DeleteByPublishedAt(ctx context.Context, db *sql.DB, publishedAtStartTime interface{}, publishedAtEndTime interface{}) error
	FindOneByTitleAndAuthor(ctx context.Context, db *sql.DB, title interface{}, author interface{}) (*Book, error)
	FindByTitleAndAuthor(ctx context.Context, db *sql.DB, title interface{}, author interface{}, paginationOpts ...PaginationOption) ([]*Book, error)
	DeleteByTitleAndAuthor(ctx context.Context, db *sql.DB, title interface{}, author interface{}) error
}

func (m *Book) Get(ctx context.Context, db *sql.DB, id int64) (*Book, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, author, title, published_at"+
		" FROM `book` WHERE id = ? AND deleted_at IS NULL LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm Book

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var publishedAt sql.NullTime

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.Author,
		&mm.Title,
		&publishedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}
	if publishedAt.Valid {
		mm.PublishedAt = timestamppb.New(publishedAt.Time)
	}

	return &mm, nil
}

func (m *Book) List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*Book, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, author, title, published_at" +
		" FROM `book` WHERE deleted_at IS NULL"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*Book

	for rows.Next() {
		var mm Book

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var publishedAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.Author,
			&mm.Title,
			&publishedAt,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}
		if publishedAt.Valid {
			mm.PublishedAt = timestamppb.New(publishedAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *Book) FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*Book, error) {
	if len(ids) == 0 {
		return nil, nil
	}

	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, author, title, published_at" +
		" FROM `book` WHERE deleted_at IS NULL AND id IN ("
	for i := range ids {
		if i > 0 {
			q += ", "
		}
		q += "?"
	}
	q += ")"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	for _, id := range ids {
		args = append(args, id)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*Book

	for rows.Next() {
		var mm Book

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var publishedAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.Author,
			&mm.Title,
			&publishedAt,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}
		if publishedAt.Valid {
			mm.PublishedAt = timestamppb.New(publishedAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *Book) FindOneByAuthorAndTitle(ctx context.Context, db *sql.DB, authorParam interface{}, titleParam interface{}) (*Book, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, author, title, published_at"+
		" FROM `book` WHERE deleted_at IS NULL AND author=? AND title=? LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm Book

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var publishedAt sql.NullTime

	if err = stmt.QueryRowContext(
		ctx, authorParam, titleParam,
	).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.Author,
		&mm.Title,
		&publishedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}

	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}

	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}

	if publishedAt.Valid {
		mm.PublishedAt = timestamppb.New(publishedAt.Time)
	}

	return &mm, nil
}

func (m *Book) FindByAuthorAndTitle(ctx context.Context, db *sql.DB, authorParam interface{}, titleParam interface{}, paginationOpts ...PaginationOption) ([]*Book, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, author, title, published_at" +
		" FROM `book` WHERE deleted_at IS NULL AND author=? AND title=?"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	args := []interface{}{
		authorParam,
		titleParam,
	}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*Book

	for rows.Next() {
		var mm Book

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var publishedAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.Author,
			&mm.Title,
			&publishedAt,
		); err != nil {
			if err == sql.ErrNoRows {
				return nil, ErrNotFound
			}
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}

		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}

		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}

		if publishedAt.Valid {
			mm.PublishedAt = timestamppb.New(publishedAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *Book) DeleteByAuthorAndTitle(ctx context.Context, db *sql.DB, authorParam interface{}, titleParam interface{}) error {
	currentAt := timestamppb.Now()

	q := "UPDATE `book` SET deleted_at=? WHERE deleted_at IS NULL AND author=? AND title=?"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return err
	}
	defer stmt.Close()

	args := []interface{}{
		currentAt.AsTime(),
		authorParam,
		titleParam,
	}

	if _, err := stmt.ExecContext(
		ctx,
		args...,
	); err != nil {
		return err
	}

	return nil
}

func (m *Book) FindOneByPublishedAt(ctx context.Context, db *sql.DB, publishedAtParamStartTime interface{}, publishedAtParamEndTime interface{}) (*Book, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, author, title, published_at"+
		" FROM `book` WHERE deleted_at IS NULL AND published_at>=? AND published_at<=? LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm Book

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var publishedAt sql.NullTime

	if err = stmt.QueryRowContext(
		ctx,
		publishedAtParamStartTime,
		publishedAtParamEndTime,
	).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.Author,
		&mm.Title,
		&publishedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}

	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}

	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}

	if publishedAt.Valid {
		mm.PublishedAt = timestamppb.New(publishedAt.Time)
	}

	return &mm, nil
}

func (m *Book) FindByPublishedAt(ctx context.Context, db *sql.DB, publishedAtParamStartTime interface{}, publishedAtParamEndTime interface{}, paginationOpts ...PaginationOption) ([]*Book, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, author, title, published_at" +
		" FROM `book` WHERE deleted_at IS NULL AND published_at>=? AND published_at<=?"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	args := []interface{}{
		publishedAtParamStartTime,
		publishedAtParamEndTime,
	}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*Book

	for rows.Next() {
		var mm Book

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var publishedAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.Author,
			&mm.Title,
			&publishedAt,
		); err != nil {
			if err == sql.ErrNoRows {
				return nil, ErrNotFound
			}
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}

		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}

		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}

		if publishedAt.Valid {
			mm.PublishedAt = timestamppb.New(publishedAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *Book) DeleteByPublishedAt(ctx context.Context, db *sql.DB, publishedAtParamStartTime interface{}, publishedAtParamEndTime interface{}) error {
	currentAt := timestamppb.Now()

	q := "UPDATE `book` SET deleted_at=? WHERE deleted_at IS NULL AND published_at>=? AND published_at<=?"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return err
	}
	defer stmt.Close()

	args := []interface{}{
		currentAt.AsTime(),
		publishedAtParamStartTime,
		publishedAtParamEndTime,
	}

	if _, err := stmt.ExecContext(
		ctx,
		args...,
	); err != nil {
		return err
	}

	return nil
}

func (m *Book) FindOneByTitleAndAuthor(ctx context.Context, db *sql.DB, titleParam interface{}, authorParam interface{}) (*Book, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, author, title, published_at"+
		" FROM `book` WHERE deleted_at IS NULL AND title=? AND author=? LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm Book

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var publishedAt sql.NullTime

	if err = stmt.QueryRowContext(
		ctx, titleParam, authorParam,
	).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.Author,
		&mm.Title,
		&publishedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}

	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}

	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}

	if publishedAt.Valid {
		mm.PublishedAt = timestamppb.New(publishedAt.Time)
	}

	return &mm, nil
}

func (m *Book) FindByTitleAndAuthor(ctx context.Context, db *sql.DB, titleParam interface{}, authorParam interface{}, paginationOpts ...PaginationOption) ([]*Book, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, author, title, published_at" +
		" FROM `book` WHERE deleted_at IS NULL AND title=? AND author=?"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	args := []interface{}{
		titleParam,
		authorParam,
	}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*Book

	for rows.Next() {
		var mm Book

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var publishedAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.Author,
			&mm.Title,
			&publishedAt,
		); err != nil {
			if err == sql.ErrNoRows {
				return nil, ErrNotFound
			}
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}

		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}

		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}

		if publishedAt.Valid {
			mm.PublishedAt = timestamppb.New(publishedAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *Book) DeleteByTitleAndAuthor(ctx context.Context, db *sql.DB, titleParam interface{}, authorParam interface{}) error {
	currentAt := timestamppb.Now()

	q := "UPDATE `book` SET deleted_at=? WHERE deleted_at IS NULL AND title=? AND author=?"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return err
	}
	defer stmt.Close()

	args := []interface{}{
		currentAt.AsTime(),
		titleParam,
		authorParam,
	}

	if _, err := stmt.ExecContext(
		ctx,
		args...,
	); err != nil {
		return err
	}

	return nil
}

func (m *Book) Save(ctx context.Context, db *sql.DB, message *Book) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.Get(ctx, db, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insert(ctx, db, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.update(ctx, db, message); err != nil {
			return err
		}
	}

	mm, err = m.Get(ctx, db, message.Id)
	if err != nil {
		return err
	}

	proto.Merge(message, mm)

	return nil
}

func (m *Book) insert(ctx context.Context, db *sql.DB, message *Book) error {
	currentAt := timestamppb.Now()

	var publishedAt sql.NullTime
	if message.PublishedAt != nil {
		if err := publishedAt.Scan(message.PublishedAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := db.ExecContext(
		ctx,
		bookInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Author,
		message.Title,
		publishedAt,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *Book) update(ctx context.Context, db *sql.DB, message *Book) error {
	currentAt := timestamppb.Now()

	var publishedAt sql.NullTime
	if message.PublishedAt != nil {
		if err := publishedAt.Scan(message.PublishedAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := db.ExecContext(
		ctx,
		bookUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Author,
		message.Title,
		publishedAt,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *Book) Delete(ctx context.Context, db *sql.DB, id int64) error {
	currentAt := timestamppb.Now()

	_, err := db.ExecContext(
		ctx,
		bookDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *Book) DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error {
	currentAt := timestamppb.Now()

	_, err := tx.ExecContext(
		ctx,
		bookDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *Book) SaveTx(ctx context.Context, tx *sql.Tx, message *Book) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.getTx(ctx, tx, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insertTx(ctx, tx, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.updateTx(ctx, tx, message); err != nil {
			return err
		}
	}

	return nil
}

func (m *Book) insertTx(ctx context.Context, tx *sql.Tx, message *Book) error {
	currentAt := timestamppb.Now()

	var publishedAt sql.NullTime
	if message.PublishedAt != nil {
		if err := publishedAt.Scan(message.PublishedAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := tx.ExecContext(
		ctx,
		bookInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Author,
		message.Title,
		publishedAt,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *Book) updateTx(ctx context.Context, tx *sql.Tx, message *Book) error {
	currentAt := timestamppb.Now()

	var publishedAt sql.NullTime
	if message.PublishedAt != nil {
		if err := publishedAt.Scan(message.PublishedAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := tx.ExecContext(
		ctx,
		bookUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.Author,
		message.Title,
		publishedAt,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *Book) getTx(ctx context.Context, tx *sql.Tx, id int64) (*Book, error) {
	stmt, err := tx.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, author, title, published_at"+
		" FROM `book` WHERE id = ? AND deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm Book

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var publishedAt sql.NullTime

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.Author,
		&mm.Title,
		&publishedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}
	if publishedAt.Valid {
		mm.PublishedAt = timestamppb.New(publishedAt.Time)
	}

	return &mm, nil
}
