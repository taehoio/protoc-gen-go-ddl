// Code generated by protoc-gen-go-ddl. DO NOT EDIT.
// versions:
//  protoc-gen-go-ddl v0.0.1-alpha
//  protoc            (unknown)
// source: taehoio/ddl/services/test/v1/test.proto

package testv1

import (
	"context"
	"database/sql"
	"strings"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
)

//go:generate mockgen -package testv1 -self_package "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" -source ./test_dml_custom_static_area_job_mysql.pb.go -destination ./test_dml_custom_static_area_job_mysql_mock.pb.go -mock_names CustomStaticAreaJobRecorder=MockCustomStaticAreaJobRecorder "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" CustomStaticAreaJobRecorder

const (
	customStaticAreaJobInsertStmt = "INSERT INTO `custom_static_area_job` " + `(
			id, created_at, updated_at, deleted_at, job_started_at, job_finished_at, custom_static_area_id, time_range_starts_at, time_range_ends_at, minimum_checkedin_days_count, job_status, job_trigger_type
		) VALUES (
			?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
		)
	`

	customStaticAreaJobUpdateStmt = "UPDATE `custom_static_area_job` SET" + `
			id = ?, created_at = ?, updated_at = ?, deleted_at = ?, job_started_at = ?, job_finished_at = ?, custom_static_area_id = ?, time_range_starts_at = ?, time_range_ends_at = ?, minimum_checkedin_days_count = ?, job_status = ?, job_trigger_type = ?
		WHERE
			id = ?
	`

	customStaticAreaJobDeleteStmt = "UPDATE `custom_static_area_job` SET" + `
            deleted_at = ?
        WHERE
            id = ?
    `
)

var (
	_ = timestamppb.Timestamp{}
)

type CustomStaticAreaJobRecorder interface {
	Get(ctx context.Context, db *sql.DB, id int64) (*CustomStaticAreaJob, error)
	List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*CustomStaticAreaJob, error)
	FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*CustomStaticAreaJob, error)
	Save(ctx context.Context, db *sql.DB, message *CustomStaticAreaJob) error
	SaveTx(ctx context.Context, tx *sql.Tx, message *CustomStaticAreaJob) error
	Delete(ctx context.Context, db *sql.DB, id int64) error
	DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error
	FindOneByCustomStaticAreaId(ctx context.Context, db *sql.DB, customStaticAreaId interface{}) (*CustomStaticAreaJob, error)
	FindByCustomStaticAreaId(ctx context.Context, db *sql.DB, customStaticAreaId interface{}, paginationOpts ...PaginationOption) ([]*CustomStaticAreaJob, error)
	DeleteByCustomStaticAreaId(ctx context.Context, db *sql.DB, customStaticAreaId interface{}) error
}

func (m *CustomStaticAreaJob) Get(ctx context.Context, db *sql.DB, id int64) (*CustomStaticAreaJob, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, job_started_at, job_finished_at, custom_static_area_id, time_range_starts_at, time_range_ends_at, minimum_checkedin_days_count, job_status, job_trigger_type"+
		" FROM `custom_static_area_job` WHERE id = ? AND deleted_at IS NULL LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm CustomStaticAreaJob

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var jobStartedAt sql.NullTime
	var jobFinishedAt sql.NullTime
	var timeRangeStartsAt sql.NullTime
	var timeRangeEndsAt sql.NullTime

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&jobStartedAt,
		&jobFinishedAt,
		&mm.CustomStaticAreaId,
		&timeRangeStartsAt,
		&timeRangeEndsAt,
		&mm.MinimumCheckedinDaysCount,
		&mm.JobStatus,
		&mm.JobTriggerType,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}
	if jobStartedAt.Valid {
		mm.JobStartedAt = timestamppb.New(jobStartedAt.Time)
	}
	if jobFinishedAt.Valid {
		mm.JobFinishedAt = timestamppb.New(jobFinishedAt.Time)
	}
	if timeRangeStartsAt.Valid {
		mm.TimeRangeStartsAt = timestamppb.New(timeRangeStartsAt.Time)
	}
	if timeRangeEndsAt.Valid {
		mm.TimeRangeEndsAt = timestamppb.New(timeRangeEndsAt.Time)
	}

	return &mm, nil
}

func (m *CustomStaticAreaJob) List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*CustomStaticAreaJob, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, job_started_at, job_finished_at, custom_static_area_id, time_range_starts_at, time_range_ends_at, minimum_checkedin_days_count, job_status, job_trigger_type" +
		" FROM `custom_static_area_job` WHERE deleted_at IS NULL"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*CustomStaticAreaJob

	for rows.Next() {
		var mm CustomStaticAreaJob

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var jobStartedAt sql.NullTime
		var jobFinishedAt sql.NullTime
		var timeRangeStartsAt sql.NullTime
		var timeRangeEndsAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&jobStartedAt,
			&jobFinishedAt,
			&mm.CustomStaticAreaId,
			&timeRangeStartsAt,
			&timeRangeEndsAt,
			&mm.MinimumCheckedinDaysCount,
			&mm.JobStatus,
			&mm.JobTriggerType,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}
		if jobStartedAt.Valid {
			mm.JobStartedAt = timestamppb.New(jobStartedAt.Time)
		}
		if jobFinishedAt.Valid {
			mm.JobFinishedAt = timestamppb.New(jobFinishedAt.Time)
		}
		if timeRangeStartsAt.Valid {
			mm.TimeRangeStartsAt = timestamppb.New(timeRangeStartsAt.Time)
		}
		if timeRangeEndsAt.Valid {
			mm.TimeRangeEndsAt = timestamppb.New(timeRangeEndsAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *CustomStaticAreaJob) FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*CustomStaticAreaJob, error) {
	if len(ids) == 0 {
		return nil, nil
	}

	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, job_started_at, job_finished_at, custom_static_area_id, time_range_starts_at, time_range_ends_at, minimum_checkedin_days_count, job_status, job_trigger_type" +
		" FROM `custom_static_area_job` WHERE deleted_at IS NULL AND id IN ("
	for i := range ids {
		if i > 0 {
			q += ", "
		}
		q += "?"
	}
	q += ")"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	for _, id := range ids {
		args = append(args, id)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*CustomStaticAreaJob

	for rows.Next() {
		var mm CustomStaticAreaJob

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var jobStartedAt sql.NullTime
		var jobFinishedAt sql.NullTime
		var timeRangeStartsAt sql.NullTime
		var timeRangeEndsAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&jobStartedAt,
			&jobFinishedAt,
			&mm.CustomStaticAreaId,
			&timeRangeStartsAt,
			&timeRangeEndsAt,
			&mm.MinimumCheckedinDaysCount,
			&mm.JobStatus,
			&mm.JobTriggerType,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}
		if jobStartedAt.Valid {
			mm.JobStartedAt = timestamppb.New(jobStartedAt.Time)
		}
		if jobFinishedAt.Valid {
			mm.JobFinishedAt = timestamppb.New(jobFinishedAt.Time)
		}
		if timeRangeStartsAt.Valid {
			mm.TimeRangeStartsAt = timestamppb.New(timeRangeStartsAt.Time)
		}
		if timeRangeEndsAt.Valid {
			mm.TimeRangeEndsAt = timestamppb.New(timeRangeEndsAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *CustomStaticAreaJob) FindOneByCustomStaticAreaId(ctx context.Context, db *sql.DB, customStaticAreaIdParam interface{}) (*CustomStaticAreaJob, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, job_started_at, job_finished_at, custom_static_area_id, time_range_starts_at, time_range_ends_at, minimum_checkedin_days_count, job_status, job_trigger_type"+
		" FROM `custom_static_area_job` WHERE deleted_at IS NULL AND custom_static_area_id=? LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm CustomStaticAreaJob

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var jobStartedAt sql.NullTime
	var jobFinishedAt sql.NullTime
	var timeRangeStartsAt sql.NullTime
	var timeRangeEndsAt sql.NullTime

	if err = stmt.QueryRowContext(
		ctx, customStaticAreaIdParam,
	).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&jobStartedAt,
		&jobFinishedAt,
		&mm.CustomStaticAreaId,
		&timeRangeStartsAt,
		&timeRangeEndsAt,
		&mm.MinimumCheckedinDaysCount,
		&mm.JobStatus,
		&mm.JobTriggerType,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}

	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}

	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}

	if jobStartedAt.Valid {
		mm.JobStartedAt = timestamppb.New(jobStartedAt.Time)
	}

	if jobFinishedAt.Valid {
		mm.JobFinishedAt = timestamppb.New(jobFinishedAt.Time)
	}

	if timeRangeStartsAt.Valid {
		mm.TimeRangeStartsAt = timestamppb.New(timeRangeStartsAt.Time)
	}

	if timeRangeEndsAt.Valid {
		mm.TimeRangeEndsAt = timestamppb.New(timeRangeEndsAt.Time)
	}

	return &mm, nil
}

func (m *CustomStaticAreaJob) FindByCustomStaticAreaId(ctx context.Context, db *sql.DB, customStaticAreaIdParam interface{}, paginationOpts ...PaginationOption) ([]*CustomStaticAreaJob, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, job_started_at, job_finished_at, custom_static_area_id, time_range_starts_at, time_range_ends_at, minimum_checkedin_days_count, job_status, job_trigger_type" +
		" FROM `custom_static_area_job` WHERE deleted_at IS NULL AND custom_static_area_id=?"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	args := []interface{}{
		customStaticAreaIdParam,
	}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*CustomStaticAreaJob

	for rows.Next() {
		var mm CustomStaticAreaJob

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var jobStartedAt sql.NullTime
		var jobFinishedAt sql.NullTime
		var timeRangeStartsAt sql.NullTime
		var timeRangeEndsAt sql.NullTime

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&jobStartedAt,
			&jobFinishedAt,
			&mm.CustomStaticAreaId,
			&timeRangeStartsAt,
			&timeRangeEndsAt,
			&mm.MinimumCheckedinDaysCount,
			&mm.JobStatus,
			&mm.JobTriggerType,
		); err != nil {
			if err == sql.ErrNoRows {
				return nil, ErrNotFound
			}
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}

		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}

		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}

		if jobStartedAt.Valid {
			mm.JobStartedAt = timestamppb.New(jobStartedAt.Time)
		}

		if jobFinishedAt.Valid {
			mm.JobFinishedAt = timestamppb.New(jobFinishedAt.Time)
		}

		if timeRangeStartsAt.Valid {
			mm.TimeRangeStartsAt = timestamppb.New(timeRangeStartsAt.Time)
		}

		if timeRangeEndsAt.Valid {
			mm.TimeRangeEndsAt = timestamppb.New(timeRangeEndsAt.Time)
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *CustomStaticAreaJob) DeleteByCustomStaticAreaId(ctx context.Context, db *sql.DB, customStaticAreaIdParam interface{}) error {
	currentAt := timestamppb.Now()

	q := "UPDATE `custom_static_area_job` SET deleted_at=? WHERE deleted_at IS NULL AND custom_static_area_id=?"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return err
	}
	defer stmt.Close()

	args := []interface{}{
		currentAt.AsTime(),
		customStaticAreaIdParam,
	}

	if _, err := stmt.ExecContext(
		ctx,
		args...,
	); err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticAreaJob) Save(ctx context.Context, db *sql.DB, message *CustomStaticAreaJob) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.Get(ctx, db, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insert(ctx, db, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.update(ctx, db, message); err != nil {
			return err
		}
	}

	mm, err = m.Get(ctx, db, message.Id)
	if err != nil {
		return err
	}

	proto.Merge(message, mm)

	return nil
}

func (m *CustomStaticAreaJob) insert(ctx context.Context, db *sql.DB, message *CustomStaticAreaJob) error {
	currentAt := timestamppb.Now()

	var jobStartedAt sql.NullTime
	if message.JobStartedAt != nil {
		if err := jobStartedAt.Scan(message.JobStartedAt.AsTime()); err != nil {
			return err
		}
	}

	var jobFinishedAt sql.NullTime
	if message.JobFinishedAt != nil {
		if err := jobFinishedAt.Scan(message.JobFinishedAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeStartsAt sql.NullTime
	if message.TimeRangeStartsAt != nil {
		if err := timeRangeStartsAt.Scan(message.TimeRangeStartsAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeEndsAt sql.NullTime
	if message.TimeRangeEndsAt != nil {
		if err := timeRangeEndsAt.Scan(message.TimeRangeEndsAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := db.ExecContext(
		ctx,
		customStaticAreaJobInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		jobStartedAt,
		jobFinishedAt,
		message.CustomStaticAreaId,
		timeRangeStartsAt,
		timeRangeEndsAt,
		message.MinimumCheckedinDaysCount,
		message.JobStatus,
		message.JobTriggerType,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *CustomStaticAreaJob) update(ctx context.Context, db *sql.DB, message *CustomStaticAreaJob) error {
	currentAt := timestamppb.Now()

	var jobStartedAt sql.NullTime
	if message.JobStartedAt != nil {
		if err := jobStartedAt.Scan(message.JobStartedAt.AsTime()); err != nil {
			return err
		}
	}

	var jobFinishedAt sql.NullTime
	if message.JobFinishedAt != nil {
		if err := jobFinishedAt.Scan(message.JobFinishedAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeStartsAt sql.NullTime
	if message.TimeRangeStartsAt != nil {
		if err := timeRangeStartsAt.Scan(message.TimeRangeStartsAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeEndsAt sql.NullTime
	if message.TimeRangeEndsAt != nil {
		if err := timeRangeEndsAt.Scan(message.TimeRangeEndsAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := db.ExecContext(
		ctx,
		customStaticAreaJobUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		jobStartedAt,
		jobFinishedAt,
		message.CustomStaticAreaId,
		timeRangeStartsAt,
		timeRangeEndsAt,
		message.MinimumCheckedinDaysCount,
		message.JobStatus,
		message.JobTriggerType,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticAreaJob) Delete(ctx context.Context, db *sql.DB, id int64) error {
	currentAt := timestamppb.Now()

	_, err := db.ExecContext(
		ctx,
		customStaticAreaJobDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticAreaJob) DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error {
	currentAt := timestamppb.Now()

	_, err := tx.ExecContext(
		ctx,
		customStaticAreaJobDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticAreaJob) SaveTx(ctx context.Context, tx *sql.Tx, message *CustomStaticAreaJob) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.getTx(ctx, tx, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insertTx(ctx, tx, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.updateTx(ctx, tx, message); err != nil {
			return err
		}
	}

	return nil
}

func (m *CustomStaticAreaJob) insertTx(ctx context.Context, tx *sql.Tx, message *CustomStaticAreaJob) error {
	currentAt := timestamppb.Now()

	var jobStartedAt sql.NullTime
	if message.JobStartedAt != nil {
		if err := jobStartedAt.Scan(message.JobStartedAt.AsTime()); err != nil {
			return err
		}
	}

	var jobFinishedAt sql.NullTime
	if message.JobFinishedAt != nil {
		if err := jobFinishedAt.Scan(message.JobFinishedAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeStartsAt sql.NullTime
	if message.TimeRangeStartsAt != nil {
		if err := timeRangeStartsAt.Scan(message.TimeRangeStartsAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeEndsAt sql.NullTime
	if message.TimeRangeEndsAt != nil {
		if err := timeRangeEndsAt.Scan(message.TimeRangeEndsAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := tx.ExecContext(
		ctx,
		customStaticAreaJobInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		jobStartedAt,
		jobFinishedAt,
		message.CustomStaticAreaId,
		timeRangeStartsAt,
		timeRangeEndsAt,
		message.MinimumCheckedinDaysCount,
		message.JobStatus,
		message.JobTriggerType,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *CustomStaticAreaJob) updateTx(ctx context.Context, tx *sql.Tx, message *CustomStaticAreaJob) error {
	currentAt := timestamppb.Now()

	var jobStartedAt sql.NullTime
	if message.JobStartedAt != nil {
		if err := jobStartedAt.Scan(message.JobStartedAt.AsTime()); err != nil {
			return err
		}
	}

	var jobFinishedAt sql.NullTime
	if message.JobFinishedAt != nil {
		if err := jobFinishedAt.Scan(message.JobFinishedAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeStartsAt sql.NullTime
	if message.TimeRangeStartsAt != nil {
		if err := timeRangeStartsAt.Scan(message.TimeRangeStartsAt.AsTime()); err != nil {
			return err
		}
	}

	var timeRangeEndsAt sql.NullTime
	if message.TimeRangeEndsAt != nil {
		if err := timeRangeEndsAt.Scan(message.TimeRangeEndsAt.AsTime()); err != nil {
			return err
		}
	}

	_, err := tx.ExecContext(
		ctx,
		customStaticAreaJobUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		jobStartedAt,
		jobFinishedAt,
		message.CustomStaticAreaId,
		timeRangeStartsAt,
		timeRangeEndsAt,
		message.MinimumCheckedinDaysCount,
		message.JobStatus,
		message.JobTriggerType,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *CustomStaticAreaJob) getTx(ctx context.Context, tx *sql.Tx, id int64) (*CustomStaticAreaJob, error) {
	stmt, err := tx.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, job_started_at, job_finished_at, custom_static_area_id, time_range_starts_at, time_range_ends_at, minimum_checkedin_days_count, job_status, job_trigger_type"+
		" FROM `custom_static_area_job` WHERE id = ? AND deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm CustomStaticAreaJob

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var jobStartedAt sql.NullTime
	var jobFinishedAt sql.NullTime
	var timeRangeStartsAt sql.NullTime
	var timeRangeEndsAt sql.NullTime

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&jobStartedAt,
		&jobFinishedAt,
		&mm.CustomStaticAreaId,
		&timeRangeStartsAt,
		&timeRangeEndsAt,
		&mm.MinimumCheckedinDaysCount,
		&mm.JobStatus,
		&mm.JobTriggerType,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}
	if jobStartedAt.Valid {
		mm.JobStartedAt = timestamppb.New(jobStartedAt.Time)
	}
	if jobFinishedAt.Valid {
		mm.JobFinishedAt = timestamppb.New(jobFinishedAt.Time)
	}
	if timeRangeStartsAt.Valid {
		mm.TimeRangeStartsAt = timestamppb.New(timeRangeStartsAt.Time)
	}
	if timeRangeEndsAt.Valid {
		mm.TimeRangeEndsAt = timestamppb.New(timeRangeEndsAt.Time)
	}

	return &mm, nil
}
