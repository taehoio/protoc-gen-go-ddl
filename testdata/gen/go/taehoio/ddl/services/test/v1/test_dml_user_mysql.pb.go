// Code generated by protoc-gen-go-ddl. DO NOT EDIT.
// versions:
//  protoc-gen-go-ddl v0.0.1-alpha
//  protoc            (unknown)
// source: taehoio/ddl/services/test/v1/test.proto

package testv1

import (
	"context"
	"database/sql"
	"strings"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
)

//go:generate mockgen -package testv1 -self_package "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" -source ./test_dml_user_mysql.pb.go -destination ./test_dml_user_mysql_mock.pb.go -mock_names UserRecorder=MockUserRecorder "github.com/taehoio/protoc-gen-go-ddl/gen/go/ddl/services/test/v1" UserRecorder

const (
	userInsertStmt = "INSERT INTO `user` " + `(
			id, created_at, updated_at, deleted_at, password_hash, full_name, email, profile_json, birth_date, death_date, phone_number_e164
		) VALUES (
			?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
		)
	`

	userUpdateStmt = "UPDATE `user` SET" + `
			id = ?, created_at = ?, updated_at = ?, deleted_at = ?, password_hash = ?, full_name = ?, email = ?, profile_json = ?, birth_date = ?, death_date = ?, phone_number_e164 = ?
		WHERE
			id = ?
	`

	userDeleteStmt = "UPDATE `user` SET" + `
            deleted_at = ?
        WHERE
            id = ?
    `
)

var (
	_ = timestamppb.Timestamp{}
)

type UserRecorder interface {
	Get(ctx context.Context, db *sql.DB, id int64) (*User, error)
	List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*User, error)
	FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*User, error)
	Save(ctx context.Context, db *sql.DB, message *User) error
	SaveTx(ctx context.Context, tx *sql.Tx, message *User) error
	Delete(ctx context.Context, db *sql.DB, id int64) error
	DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error
	FindOneByEmail(ctx context.Context, db *sql.DB, email interface{}) (*User, error)
	FindByEmail(ctx context.Context, db *sql.DB, email interface{}, paginationOpts ...PaginationOption) ([]*User, error)
	DeleteByEmail(ctx context.Context, db *sql.DB, email interface{}) error
}

func (m *User) Get(ctx context.Context, db *sql.DB, id int64) (*User, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, password_hash, full_name, email, profile_json, birth_date, death_date, phone_number_e164"+
		" FROM `user` WHERE id = ? AND deleted_at IS NULL LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm User

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var fullName sql.NullString
	var birthDate sql.NullString
	var deathDate sql.NullString

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.PasswordHash,
		&fullName,
		&mm.Email,
		&mm.ProfileJson,
		&birthDate,
		&deathDate,
		&mm.PhoneNumberE164,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}
	if fullName.Valid {
		mm.FullName = stringPtr(fullName.String)
	}
	if birthDate.Valid {
		birthDatePtr, err := mysqlStringToDatePtr(birthDate.String)
		if err != nil {
			return nil, err
		}
		mm.BirthDate = birthDatePtr
	}
	if deathDate.Valid {
		deathDatePtr, err := mysqlStringToDatePtr(deathDate.String)
		if err != nil {
			return nil, err
		}
		mm.DeathDate = deathDatePtr
	}

	return &mm, nil
}

func (m *User) List(ctx context.Context, db *sql.DB, paginationOpts ...PaginationOption) ([]*User, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, password_hash, full_name, email, profile_json, birth_date, death_date, phone_number_e164" +
		" FROM `user` WHERE deleted_at IS NULL"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*User

	for rows.Next() {
		var mm User

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var fullName sql.NullString
		var birthDate sql.NullString
		var deathDate sql.NullString

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.PasswordHash,
			&fullName,
			&mm.Email,
			&mm.ProfileJson,
			&birthDate,
			&deathDate,
			&mm.PhoneNumberE164,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}
		if fullName.Valid {
			mm.FullName = stringPtr(fullName.String)
		}
		if birthDate.Valid {
			birthDatePtr, err := mysqlStringToDatePtr(birthDate.String)
			if err != nil {
				return nil, err
			}
			mm.BirthDate = birthDatePtr
		}
		if deathDate.Valid {
			deathDatePtr, err := mysqlStringToDatePtr(deathDate.String)
			if err != nil {
				return nil, err
			}
			mm.DeathDate = deathDatePtr
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *User) FindByIDs(ctx context.Context, db *sql.DB, ids []int64) ([]*User, error) {
	if len(ids) == 0 {
		return nil, nil
	}

	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, password_hash, full_name, email, profile_json, birth_date, death_date, phone_number_e164" +
		" FROM `user` WHERE deleted_at IS NULL AND id IN ("
	for i := range ids {
		if i > 0 {
			q += ", "
		}
		q += "?"
	}
	q += ")"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var args []interface{}
	for _, id := range ids {
		args = append(args, id)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*User

	for rows.Next() {
		var mm User

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var fullName sql.NullString
		var birthDate sql.NullString
		var deathDate sql.NullString

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.PasswordHash,
			&fullName,
			&mm.Email,
			&mm.ProfileJson,
			&birthDate,
			&deathDate,
			&mm.PhoneNumberE164,
		); err != nil {
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}
		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}
		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}
		if fullName.Valid {
			mm.FullName = stringPtr(fullName.String)
		}
		if birthDate.Valid {
			birthDatePtr, err := mysqlStringToDatePtr(birthDate.String)
			if err != nil {
				return nil, err
			}
			mm.BirthDate = birthDatePtr
		}
		if deathDate.Valid {
			deathDatePtr, err := mysqlStringToDatePtr(deathDate.String)
			if err != nil {
				return nil, err
			}
			mm.DeathDate = deathDatePtr
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *User) FindOneByEmail(ctx context.Context, db *sql.DB, emailParam interface{}) (*User, error) {
	stmt, err := db.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, password_hash, full_name, email, profile_json, birth_date, death_date, phone_number_e164"+
		" FROM `user` WHERE deleted_at IS NULL AND email=? LIMIT 1")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm User

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var fullName sql.NullString
	var birthDate sql.NullString
	var deathDate sql.NullString

	if err = stmt.QueryRowContext(
		ctx, emailParam,
	).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.PasswordHash,
		&fullName,
		&mm.Email,
		&mm.ProfileJson,
		&birthDate,
		&deathDate,
		&mm.PhoneNumberE164,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}

	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}

	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}

	if fullName.Valid {
		mm.FullName = stringPtr(fullName.String)
	}

	if birthDate.Valid {
		birthDatePtr, err := mysqlStringToDatePtr(birthDate.String)
		if err != nil {
			return nil, err
		}
		mm.BirthDate = birthDatePtr
	}

	if deathDate.Valid {
		deathDatePtr, err := mysqlStringToDatePtr(deathDate.String)
		if err != nil {
			return nil, err
		}
		mm.DeathDate = deathDatePtr
	}

	return &mm, nil
}

func (m *User) FindByEmail(ctx context.Context, db *sql.DB, emailParam interface{}, paginationOpts ...PaginationOption) ([]*User, error) {
	q := "SELECT " +
		"id, created_at, updated_at, deleted_at, password_hash, full_name, email, profile_json, birth_date, death_date, phone_number_e164" +
		" FROM `user` WHERE deleted_at IS NULL AND email=?"

	var opt pagination
	for _, o := range paginationOpts {
		o(&opt)
	}
	if opt.LastID != nil {
		switch opt.Order {
		case OrderAscending:
			q += " AND id > ?"
		case OrderDescending:
			q += " AND id < ?"
		}
	}
	switch opt.Order {
	case OrderAscending:
		q += " ORDER BY id ASC"
	case OrderDescending:
		q += " ORDER BY id DESC"
	}
	if opt.Limit != nil {
		q += " LIMIT ?"
	}

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	args := []interface{}{
		emailParam,
	}
	if opt.LastID != nil {
		args = append(args, opt.LastID)
	}
	if opt.Limit != nil {
		args = append(args, *opt.Limit)
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var arr []*User

	for rows.Next() {
		var mm User

		var createdAt sql.NullTime
		var updatedAt sql.NullTime
		var deletedAt sql.NullTime
		var fullName sql.NullString
		var birthDate sql.NullString
		var deathDate sql.NullString

		if err = rows.Scan(
			&mm.Id,
			&createdAt,
			&updatedAt,
			&deletedAt,
			&mm.PasswordHash,
			&fullName,
			&mm.Email,
			&mm.ProfileJson,
			&birthDate,
			&deathDate,
			&mm.PhoneNumberE164,
		); err != nil {
			if err == sql.ErrNoRows {
				return nil, ErrNotFound
			}
			return nil, err
		}

		if createdAt.Valid {
			mm.CreatedAt = timestamppb.New(createdAt.Time)
		}

		if updatedAt.Valid {
			mm.UpdatedAt = timestamppb.New(updatedAt.Time)
		}

		if deletedAt.Valid {
			mm.DeletedAt = timestamppb.New(deletedAt.Time)
		}

		if fullName.Valid {
			mm.FullName = stringPtr(fullName.String)
		}

		if birthDate.Valid {
			birthDatePtr, err := mysqlStringToDatePtr(birthDate.String)
			if err != nil {
				return nil, err
			}
			mm.BirthDate = birthDatePtr
		}

		if deathDate.Valid {
			deathDatePtr, err := mysqlStringToDatePtr(deathDate.String)
			if err != nil {
				return nil, err
			}
			mm.DeathDate = deathDatePtr
		}

		arr = append(arr, &mm)
	}

	return arr, nil
}

func (m *User) DeleteByEmail(ctx context.Context, db *sql.DB, emailParam interface{}) error {
	currentAt := timestamppb.Now()

	q := "UPDATE `user` SET deleted_at=? WHERE deleted_at IS NULL AND email=?"

	stmt, err := db.PrepareContext(ctx, q)
	if err != nil {
		return err
	}
	defer stmt.Close()

	args := []interface{}{
		currentAt.AsTime(),
		emailParam,
	}

	if _, err := stmt.ExecContext(
		ctx,
		args...,
	); err != nil {
		return err
	}

	return nil
}

func (m *User) Save(ctx context.Context, db *sql.DB, message *User) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.Get(ctx, db, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insert(ctx, db, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.update(ctx, db, message); err != nil {
			return err
		}
	}

	mm, err = m.Get(ctx, db, message.Id)
	if err != nil {
		return err
	}

	proto.Merge(message, mm)

	return nil
}

func (m *User) insert(ctx context.Context, db *sql.DB, message *User) error {
	currentAt := timestamppb.Now()

	var fullName sql.NullString
	if message.FullName != nil {
		if err := fullName.Scan(*message.FullName); err != nil {
			return err
		}
	}

	var birthDate sql.NullString
	if message.BirthDate != nil {
		birthDateString, err := datePtrToMysqlString(message.BirthDate)
		if err != nil {
			return err
		}
		if err := birthDate.Scan(birthDateString); err != nil {
			return err
		}
	}

	var deathDate sql.NullString
	if message.DeathDate != nil {
		deathDateString, err := datePtrToMysqlString(message.DeathDate)
		if err != nil {
			return err
		}
		if err := deathDate.Scan(deathDateString); err != nil {
			return err
		}
	}

	_, err := db.ExecContext(
		ctx,
		userInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.PasswordHash,
		fullName,
		message.Email,
		message.ProfileJson,
		birthDate,
		deathDate,
		message.PhoneNumberE164,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *User) update(ctx context.Context, db *sql.DB, message *User) error {
	currentAt := timestamppb.Now()

	var fullName sql.NullString
	if message.FullName != nil {
		if err := fullName.Scan(*message.FullName); err != nil {
			return err
		}
	}

	var birthDate sql.NullString
	if message.BirthDate != nil {
		birthDateString, err := datePtrToMysqlString(message.BirthDate)
		if err != nil {
			return err
		}
		if err := birthDate.Scan(birthDateString); err != nil {
			return err
		}
	}

	var deathDate sql.NullString
	if message.DeathDate != nil {
		deathDateString, err := datePtrToMysqlString(message.DeathDate)
		if err != nil {
			return err
		}
		if err := deathDate.Scan(deathDateString); err != nil {
			return err
		}
	}

	_, err := db.ExecContext(
		ctx,
		userUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.PasswordHash,
		fullName,
		message.Email,
		message.ProfileJson,
		birthDate,
		deathDate,
		message.PhoneNumberE164,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *User) Delete(ctx context.Context, db *sql.DB, id int64) error {
	currentAt := timestamppb.Now()

	_, err := db.ExecContext(
		ctx,
		userDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *User) DeleteTx(ctx context.Context, tx *sql.Tx, id int64) error {
	currentAt := timestamppb.Now()

	_, err := tx.ExecContext(
		ctx,
		userDeleteStmt,
		currentAt.AsTime(),
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *User) SaveTx(ctx context.Context, tx *sql.Tx, message *User) error {
	if message.Id == 0 {
		return ErrIDNotExist
	}

	shouldInsert := true
	mm, err := m.getTx(ctx, tx, message.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	if mm != nil {
		shouldInsert = false
	}

	if shouldInsert {
		if err := m.insertTx(ctx, tx, message); err != nil {
			return err
		}
	} else {
		message.CreatedAt = mm.CreatedAt
		if err := m.updateTx(ctx, tx, message); err != nil {
			return err
		}
	}

	return nil
}

func (m *User) insertTx(ctx context.Context, tx *sql.Tx, message *User) error {
	currentAt := timestamppb.Now()

	var fullName sql.NullString
	if message.FullName != nil {
		if err := fullName.Scan(*message.FullName); err != nil {
			return err
		}
	}

	var birthDate sql.NullString
	if message.BirthDate != nil {
		birthDateString, err := datePtrToMysqlString(message.BirthDate)
		if err != nil {
			return err
		}
		if err := birthDate.Scan(birthDateString); err != nil {
			return err
		}
	}

	var deathDate sql.NullString
	if message.DeathDate != nil {
		deathDateString, err := datePtrToMysqlString(message.DeathDate)
		if err != nil {
			return err
		}
		if err := deathDate.Scan(deathDateString); err != nil {
			return err
		}
	}

	_, err := tx.ExecContext(
		ctx,
		userInsertStmt,
		message.Id,
		currentAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.PasswordHash,
		fullName,
		message.Email,
		message.ProfileJson,
		birthDate,
		deathDate,
		message.PhoneNumberE164,
	)
	if err != nil {
		if strings.HasPrefix(err.Error(), "Error 1062: Duplicate entry") {
			return ErrDuplicateEntry
		}
		return err
	}

	return nil
}

func (m *User) updateTx(ctx context.Context, tx *sql.Tx, message *User) error {
	currentAt := timestamppb.Now()

	var fullName sql.NullString
	if message.FullName != nil {
		if err := fullName.Scan(*message.FullName); err != nil {
			return err
		}
	}

	var birthDate sql.NullString
	if message.BirthDate != nil {
		birthDateString, err := datePtrToMysqlString(message.BirthDate)
		if err != nil {
			return err
		}
		if err := birthDate.Scan(birthDateString); err != nil {
			return err
		}
	}

	var deathDate sql.NullString
	if message.DeathDate != nil {
		deathDateString, err := datePtrToMysqlString(message.DeathDate)
		if err != nil {
			return err
		}
		if err := deathDate.Scan(deathDateString); err != nil {
			return err
		}
	}

	_, err := tx.ExecContext(
		ctx,
		userUpdateStmt,
		message.Id,
		message.CreatedAt.AsTime(),
		currentAt.AsTime(),
		nil,
		message.PasswordHash,
		fullName,
		message.Email,
		message.ProfileJson,
		birthDate,
		deathDate,
		message.PhoneNumberE164,
		message.Id,
	)
	if err != nil {
		return err
	}

	return nil
}

func (m *User) getTx(ctx context.Context, tx *sql.Tx, id int64) (*User, error) {
	stmt, err := tx.PrepareContext(ctx, "SELECT "+
		"id, created_at, updated_at, deleted_at, password_hash, full_name, email, profile_json, birth_date, death_date, phone_number_e164"+
		" FROM `user` WHERE id = ? AND deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var mm User

	var createdAt sql.NullTime
	var updatedAt sql.NullTime
	var deletedAt sql.NullTime
	var fullName sql.NullString
	var birthDate sql.NullString
	var deathDate sql.NullString

	if err = stmt.QueryRowContext(ctx, id).Scan(
		&mm.Id,
		&createdAt,
		&updatedAt,
		&deletedAt,
		&mm.PasswordHash,
		&fullName,
		&mm.Email,
		&mm.ProfileJson,
		&birthDate,
		&deathDate,
		&mm.PhoneNumberE164,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrNotFound
		}
		return nil, err
	}

	if createdAt.Valid {
		mm.CreatedAt = timestamppb.New(createdAt.Time)
	}
	if updatedAt.Valid {
		mm.UpdatedAt = timestamppb.New(updatedAt.Time)
	}
	if deletedAt.Valid {
		mm.DeletedAt = timestamppb.New(deletedAt.Time)
	}
	if fullName.Valid {
		mm.FullName = stringPtr(fullName.String)
	}
	if birthDate.Valid {
		birthDatePtr, err := mysqlStringToDatePtr(birthDate.String)
		if err != nil {
			return nil, err
		}
		mm.BirthDate = birthDatePtr
	}
	if deathDate.Valid {
		deathDatePtr, err := mysqlStringToDatePtr(deathDate.String)
		if err != nil {
			return nil, err
		}
		mm.DeathDate = deathDatePtr
	}

	return &mm, nil
}
