// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: taehoio/ddl/services/test/v1/test.proto

package testv1

import (
	_ "github.com/taehoio/protoc-gen-go-ddl/gen/go/taehoio/ddl/protobuf/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountryCode int32

const (
	CountryCode_COUNTRY_CODE_UNSPECIFIED CountryCode = 0
	CountryCode_COUNTRY_CODE_KR          CountryCode = 1
	CountryCode_COUNTRY_CODE_CA          CountryCode = 2
	CountryCode_COUNTRY_CODE_GB          CountryCode = 3
	CountryCode_COUNTRY_CODE_JP          CountryCode = 4
)

// Enum value maps for CountryCode.
var (
	CountryCode_name = map[int32]string{
		0: "COUNTRY_CODE_UNSPECIFIED",
		1: "COUNTRY_CODE_KR",
		2: "COUNTRY_CODE_CA",
		3: "COUNTRY_CODE_GB",
		4: "COUNTRY_CODE_JP",
	}
	CountryCode_value = map[string]int32{
		"COUNTRY_CODE_UNSPECIFIED": 0,
		"COUNTRY_CODE_KR":          1,
		"COUNTRY_CODE_CA":          2,
		"COUNTRY_CODE_GB":          3,
		"COUNTRY_CODE_JP":          4,
	}
)

func (x CountryCode) Enum() *CountryCode {
	p := new(CountryCode)
	*p = x
	return p
}

func (x CountryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_taehoio_ddl_services_test_v1_test_proto_enumTypes[0].Descriptor()
}

func (CountryCode) Type() protoreflect.EnumType {
	return &file_taehoio_ddl_services_test_v1_test_proto_enumTypes[0]
}

func (x CountryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryCode.Descriptor instead.
func (CountryCode) EnumDescriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{0}
}

type UserIdType int32

const (
	UserIdType_USER_ID_TYPE_UNSPECIFIED UserIdType = 0
	UserIdType_USER_ID_TYPE_KARROT      UserIdType = 1
	UserIdType_USER_ID_TYPE_HOIAN       UserIdType = 2
)

// Enum value maps for UserIdType.
var (
	UserIdType_name = map[int32]string{
		0: "USER_ID_TYPE_UNSPECIFIED",
		1: "USER_ID_TYPE_KARROT",
		2: "USER_ID_TYPE_HOIAN",
	}
	UserIdType_value = map[string]int32{
		"USER_ID_TYPE_UNSPECIFIED": 0,
		"USER_ID_TYPE_KARROT":      1,
		"USER_ID_TYPE_HOIAN":       2,
	}
)

func (x UserIdType) Enum() *UserIdType {
	p := new(UserIdType)
	*p = x
	return p
}

func (x UserIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_taehoio_ddl_services_test_v1_test_proto_enumTypes[1].Descriptor()
}

func (UserIdType) Type() protoreflect.EnumType {
	return &file_taehoio_ddl_services_test_v1_test_proto_enumTypes[1]
}

func (x UserIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserIdType.Descriptor instead.
func (UserIdType) EnumDescriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{1}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	PasswordHash string                 `protobuf:"bytes,5,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	FullName     *string                `protobuf:"bytes,6,opt,name=full_name,json=fullName,proto3,oneof" json:"full_name,omitempty"`
	Email        string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	ProfileJson  string                 `protobuf:"bytes,8,opt,name=profile_json,json=profileJson,proto3" json:"profile_json,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *User) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *User) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetProfileJson() string {
	if x != nil {
		return x.ProfileJson
	}
	return ""
}

type UserCheckin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	CountryCode        CountryCode            `protobuf:"varint,5,opt,name=country_code,json=countryCode,proto3,enum=taehoio.ddl.services.test.v1.CountryCode" json:"country_code,omitempty"`
	UserIdType         UserIdType             `protobuf:"varint,6,opt,name=user_id_type,json=userIdType,proto3,enum=taehoio.ddl.services.test.v1.UserIdType" json:"user_id_type,omitempty"`
	UserId             string                 `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Latitude           float64                `protobuf:"fixed64,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude          float64                `protobuf:"fixed64,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude           *float64               `protobuf:"fixed64,10,opt,name=altitude,proto3,oneof" json:"altitude,omitempty"`
	HorizontalAccuracy *float64               `protobuf:"fixed64,11,opt,name=horizontal_accuracy,json=horizontalAccuracy,proto3,oneof" json:"horizontal_accuracy,omitempty"`
	VerticalAccuracy   *float64               `protobuf:"fixed64,12,opt,name=vertical_accuracy,json=verticalAccuracy,proto3,oneof" json:"vertical_accuracy,omitempty"`
	MeasuredAt         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=measured_at,json=measuredAt,proto3,oneof" json:"measured_at,omitempty"`
}

func (x *UserCheckin) Reset() {
	*x = UserCheckin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCheckin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCheckin) ProtoMessage() {}

func (x *UserCheckin) ProtoReflect() protoreflect.Message {
	mi := &file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCheckin.ProtoReflect.Descriptor instead.
func (*UserCheckin) Descriptor() ([]byte, []int) {
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP(), []int{1}
}

func (x *UserCheckin) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserCheckin) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserCheckin) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserCheckin) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *UserCheckin) GetCountryCode() CountryCode {
	if x != nil {
		return x.CountryCode
	}
	return CountryCode_COUNTRY_CODE_UNSPECIFIED
}

func (x *UserCheckin) GetUserIdType() UserIdType {
	if x != nil {
		return x.UserIdType
	}
	return UserIdType_USER_ID_TYPE_UNSPECIFIED
}

func (x *UserCheckin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserCheckin) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UserCheckin) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UserCheckin) GetAltitude() float64 {
	if x != nil && x.Altitude != nil {
		return *x.Altitude
	}
	return 0
}

func (x *UserCheckin) GetHorizontalAccuracy() float64 {
	if x != nil && x.HorizontalAccuracy != nil {
		return *x.HorizontalAccuracy
	}
	return 0
}

func (x *UserCheckin) GetVerticalAccuracy() float64 {
	if x != nil && x.VerticalAccuracy != nil {
		return *x.VerticalAccuracy
	}
	return 0
}

func (x *UserCheckin) GetMeasuredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasuredAt
	}
	return nil
}

var File_taehoio_ddl_services_test_v1_test_proto protoreflect.FileDescriptor

var file_taehoio_ddl_services_test_v1_test_proto_rawDesc = []byte{
	0x0a, 0x27, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2f, 0x64, 0x64, 0x6c, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x74, 0x61, 0x65, 0x68, 0x6f,
	0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69,
	0x6f, 0x2f, 0x64, 0x64, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x98, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xd2, 0xe4, 0x1d, 0x0e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x64, 0x78, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0xe4, 0x1d,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x54, 0x45, 0x58, 0x54, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x02, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x07, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74,
	0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x31, 0xd2, 0xe4, 0x1d, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x61, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x31, 0xd2, 0xe4, 0x1d, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x61, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xd2, 0xe4, 0x1d, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x61, 0x74, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01,
	0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x13, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x12, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x31, 0xd2, 0xe4, 0x1d, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x61, 0x74, 0x48, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xa6, 0x1d, 0x02,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2a, 0x7f, 0x0a, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x47, 0x42, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x50, 0x10, 0x04, 0x2a, 0x5b, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x41, 0x52, 0x52, 0x4f, 0x54, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x4f, 0x49, 0x41, 0x4e, 0x10, 0x02, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x65, 0x68, 0x6f, 0x69, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x64, 0x6c,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x64, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73,
	0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taehoio_ddl_services_test_v1_test_proto_rawDescOnce sync.Once
	file_taehoio_ddl_services_test_v1_test_proto_rawDescData = file_taehoio_ddl_services_test_v1_test_proto_rawDesc
)

func file_taehoio_ddl_services_test_v1_test_proto_rawDescGZIP() []byte {
	file_taehoio_ddl_services_test_v1_test_proto_rawDescOnce.Do(func() {
		file_taehoio_ddl_services_test_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_taehoio_ddl_services_test_v1_test_proto_rawDescData)
	})
	return file_taehoio_ddl_services_test_v1_test_proto_rawDescData
}

var file_taehoio_ddl_services_test_v1_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_taehoio_ddl_services_test_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_taehoio_ddl_services_test_v1_test_proto_goTypes = []interface{}{
	(CountryCode)(0),              // 0: taehoio.ddl.services.test.v1.CountryCode
	(UserIdType)(0),               // 1: taehoio.ddl.services.test.v1.UserIdType
	(*User)(nil),                  // 2: taehoio.ddl.services.test.v1.User
	(*UserCheckin)(nil),           // 3: taehoio.ddl.services.test.v1.UserCheckin
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_taehoio_ddl_services_test_v1_test_proto_depIdxs = []int32{
	4, // 0: taehoio.ddl.services.test.v1.User.created_at:type_name -> google.protobuf.Timestamp
	4, // 1: taehoio.ddl.services.test.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	4, // 2: taehoio.ddl.services.test.v1.User.deleted_at:type_name -> google.protobuf.Timestamp
	4, // 3: taehoio.ddl.services.test.v1.UserCheckin.created_at:type_name -> google.protobuf.Timestamp
	4, // 4: taehoio.ddl.services.test.v1.UserCheckin.updated_at:type_name -> google.protobuf.Timestamp
	4, // 5: taehoio.ddl.services.test.v1.UserCheckin.deleted_at:type_name -> google.protobuf.Timestamp
	0, // 6: taehoio.ddl.services.test.v1.UserCheckin.country_code:type_name -> taehoio.ddl.services.test.v1.CountryCode
	1, // 7: taehoio.ddl.services.test.v1.UserCheckin.user_id_type:type_name -> taehoio.ddl.services.test.v1.UserIdType
	4, // 8: taehoio.ddl.services.test.v1.UserCheckin.measured_at:type_name -> google.protobuf.Timestamp
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_taehoio_ddl_services_test_v1_test_proto_init() }
func file_taehoio_ddl_services_test_v1_test_proto_init() {
	if File_taehoio_ddl_services_test_v1_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCheckin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_taehoio_ddl_services_test_v1_test_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taehoio_ddl_services_test_v1_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_taehoio_ddl_services_test_v1_test_proto_goTypes,
		DependencyIndexes: file_taehoio_ddl_services_test_v1_test_proto_depIdxs,
		EnumInfos:         file_taehoio_ddl_services_test_v1_test_proto_enumTypes,
		MessageInfos:      file_taehoio_ddl_services_test_v1_test_proto_msgTypes,
	}.Build()
	File_taehoio_ddl_services_test_v1_test_proto = out.File
	file_taehoio_ddl_services_test_v1_test_proto_rawDesc = nil
	file_taehoio_ddl_services_test_v1_test_proto_goTypes = nil
	file_taehoio_ddl_services_test_v1_test_proto_depIdxs = nil
}
